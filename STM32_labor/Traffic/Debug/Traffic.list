
Traffic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002de0  08002de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000220  20000000  08002de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c4  20000220  08003004  00020220  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002e4  08003004  000202e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009923  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000136c  00000000  00000000  00029b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009a8  00000000  00000000  0002aee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000900  00000000  00000000  0002b888  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004fe6  00000000  00000000  0002c188  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000348e  00000000  00000000  0003116e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000345fc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002864  00000000  00000000  00034678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000220 	.word	0x20000220
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002dac 	.word	0x08002dac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000224 	.word	0x20000224
 8000204:	08002dac 	.word	0x08002dac

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b97a 	b.w	8000514 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	468c      	mov	ip, r1
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	9e08      	ldr	r6, [sp, #32]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d151      	bne.n	80002ec <__udivmoddi4+0xb4>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d96d      	bls.n	800032a <__udivmoddi4+0xf2>
 800024e:	fab2 fe82 	clz	lr, r2
 8000252:	f1be 0f00 	cmp.w	lr, #0
 8000256:	d00b      	beq.n	8000270 <__udivmoddi4+0x38>
 8000258:	f1ce 0c20 	rsb	ip, lr, #32
 800025c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000260:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000264:	fa02 f70e 	lsl.w	r7, r2, lr
 8000268:	ea4c 0c05 	orr.w	ip, ip, r5
 800026c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000270:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000274:	0c25      	lsrs	r5, r4, #16
 8000276:	fbbc f8fa 	udiv	r8, ip, sl
 800027a:	fa1f f987 	uxth.w	r9, r7
 800027e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000282:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000286:	fb08 f309 	mul.w	r3, r8, r9
 800028a:	42ab      	cmp	r3, r5
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x6c>
 800028e:	19ed      	adds	r5, r5, r7
 8000290:	f108 32ff 	add.w	r2, r8, #4294967295
 8000294:	f080 8123 	bcs.w	80004de <__udivmoddi4+0x2a6>
 8000298:	42ab      	cmp	r3, r5
 800029a:	f240 8120 	bls.w	80004de <__udivmoddi4+0x2a6>
 800029e:	f1a8 0802 	sub.w	r8, r8, #2
 80002a2:	443d      	add	r5, r7
 80002a4:	1aed      	subs	r5, r5, r3
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002ac:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b4:	fb00 f909 	mul.w	r9, r0, r9
 80002b8:	45a1      	cmp	r9, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x98>
 80002bc:	19e4      	adds	r4, r4, r7
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 810a 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80002c6:	45a1      	cmp	r9, r4
 80002c8:	f240 8107 	bls.w	80004da <__udivmoddi4+0x2a2>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	eba4 0409 	sub.w	r4, r4, r9
 80002d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d8:	2100      	movs	r1, #0
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d061      	beq.n	80003a2 <__udivmoddi4+0x16a>
 80002de:	fa24 f40e 	lsr.w	r4, r4, lr
 80002e2:	2300      	movs	r3, #0
 80002e4:	6034      	str	r4, [r6, #0]
 80002e6:	6073      	str	r3, [r6, #4]
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xc8>
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d054      	beq.n	800039e <__udivmoddi4+0x166>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	f040 808e 	bne.w	8000426 <__udivmoddi4+0x1ee>
 800030a:	42ab      	cmp	r3, r5
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xdc>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2d0>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb65 0503 	sbc.w	r5, r5, r3
 800031a:	2001      	movs	r0, #1
 800031c:	46ac      	mov	ip, r5
 800031e:	2e00      	cmp	r6, #0
 8000320:	d03f      	beq.n	80003a2 <__udivmoddi4+0x16a>
 8000322:	e886 1010 	stmia.w	r6, {r4, ip}
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	b912      	cbnz	r2, 8000332 <__udivmoddi4+0xfa>
 800032c:	2701      	movs	r7, #1
 800032e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000332:	fab7 fe87 	clz	lr, r7
 8000336:	f1be 0f00 	cmp.w	lr, #0
 800033a:	d134      	bne.n	80003a6 <__udivmoddi4+0x16e>
 800033c:	1beb      	subs	r3, r5, r7
 800033e:	0c3a      	lsrs	r2, r7, #16
 8000340:	fa1f fc87 	uxth.w	ip, r7
 8000344:	2101      	movs	r1, #1
 8000346:	fbb3 f8f2 	udiv	r8, r3, r2
 800034a:	0c25      	lsrs	r5, r4, #16
 800034c:	fb02 3318 	mls	r3, r2, r8, r3
 8000350:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000354:	fb0c f308 	mul.w	r3, ip, r8
 8000358:	42ab      	cmp	r3, r5
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x134>
 800035c:	19ed      	adds	r5, r5, r7
 800035e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x132>
 8000364:	42ab      	cmp	r3, r5
 8000366:	f200 80d1 	bhi.w	800050c <__udivmoddi4+0x2d4>
 800036a:	4680      	mov	r8, r0
 800036c:	1aed      	subs	r5, r5, r3
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb5 f0f2 	udiv	r0, r5, r2
 8000374:	fb02 5510 	mls	r5, r2, r0, r5
 8000378:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800037c:	fb0c fc00 	mul.w	ip, ip, r0
 8000380:	45a4      	cmp	ip, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x15c>
 8000384:	19e4      	adds	r4, r4, r7
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x15a>
 800038c:	45a4      	cmp	ip, r4
 800038e:	f200 80b8 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 040c 	sub.w	r4, r4, ip
 8000398:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800039c:	e79d      	b.n	80002da <__udivmoddi4+0xa2>
 800039e:	4631      	mov	r1, r6
 80003a0:	4630      	mov	r0, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	f1ce 0420 	rsb	r4, lr, #32
 80003aa:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ae:	fa07 f70e 	lsl.w	r7, r7, lr
 80003b2:	fa20 f804 	lsr.w	r8, r0, r4
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa25 f404 	lsr.w	r4, r5, r4
 80003bc:	ea48 0803 	orr.w	r8, r8, r3
 80003c0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c8:	fb02 4411 	mls	r4, r2, r1, r4
 80003cc:	fa1f fc87 	uxth.w	ip, r7
 80003d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d4:	fb01 f30c 	mul.w	r3, r1, ip
 80003d8:	42ab      	cmp	r3, r5
 80003da:	fa00 f40e 	lsl.w	r4, r0, lr
 80003de:	d909      	bls.n	80003f4 <__udivmoddi4+0x1bc>
 80003e0:	19ed      	adds	r5, r5, r7
 80003e2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e6:	f080 808a 	bcs.w	80004fe <__udivmoddi4+0x2c6>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	f240 8087 	bls.w	80004fe <__udivmoddi4+0x2c6>
 80003f0:	3902      	subs	r1, #2
 80003f2:	443d      	add	r5, r7
 80003f4:	1aeb      	subs	r3, r5, r3
 80003f6:	fa1f f588 	uxth.w	r5, r8
 80003fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fe:	fb02 3310 	mls	r3, r2, r0, r3
 8000402:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000406:	fb00 f30c 	mul.w	r3, r0, ip
 800040a:	42ab      	cmp	r3, r5
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x1e6>
 800040e:	19ed      	adds	r5, r5, r7
 8000410:	f100 38ff 	add.w	r8, r0, #4294967295
 8000414:	d26f      	bcs.n	80004f6 <__udivmoddi4+0x2be>
 8000416:	42ab      	cmp	r3, r5
 8000418:	d96d      	bls.n	80004f6 <__udivmoddi4+0x2be>
 800041a:	3802      	subs	r0, #2
 800041c:	443d      	add	r5, r7
 800041e:	1aeb      	subs	r3, r5, r3
 8000420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000424:	e78f      	b.n	8000346 <__udivmoddi4+0x10e>
 8000426:	f1c1 0720 	rsb	r7, r1, #32
 800042a:	fa22 f807 	lsr.w	r8, r2, r7
 800042e:	408b      	lsls	r3, r1
 8000430:	fa05 f401 	lsl.w	r4, r5, r1
 8000434:	ea48 0303 	orr.w	r3, r8, r3
 8000438:	fa20 fe07 	lsr.w	lr, r0, r7
 800043c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000440:	40fd      	lsrs	r5, r7
 8000442:	ea4e 0e04 	orr.w	lr, lr, r4
 8000446:	fbb5 f9fc 	udiv	r9, r5, ip
 800044a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000452:	fa1f f883 	uxth.w	r8, r3
 8000456:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800045a:	fb09 f408 	mul.w	r4, r9, r8
 800045e:	42ac      	cmp	r4, r5
 8000460:	fa02 f201 	lsl.w	r2, r2, r1
 8000464:	fa00 fa01 	lsl.w	sl, r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x244>
 800046a:	18ed      	adds	r5, r5, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	d243      	bcs.n	80004fa <__udivmoddi4+0x2c2>
 8000472:	42ac      	cmp	r4, r5
 8000474:	d941      	bls.n	80004fa <__udivmoddi4+0x2c2>
 8000476:	f1a9 0902 	sub.w	r9, r9, #2
 800047a:	441d      	add	r5, r3
 800047c:	1b2d      	subs	r5, r5, r4
 800047e:	fa1f fe8e 	uxth.w	lr, lr
 8000482:	fbb5 f0fc 	udiv	r0, r5, ip
 8000486:	fb0c 5510 	mls	r5, ip, r0, r5
 800048a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048e:	fb00 f808 	mul.w	r8, r0, r8
 8000492:	45a0      	cmp	r8, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x26e>
 8000496:	18e4      	adds	r4, r4, r3
 8000498:	f100 35ff 	add.w	r5, r0, #4294967295
 800049c:	d229      	bcs.n	80004f2 <__udivmoddi4+0x2ba>
 800049e:	45a0      	cmp	r8, r4
 80004a0:	d927      	bls.n	80004f2 <__udivmoddi4+0x2ba>
 80004a2:	3802      	subs	r0, #2
 80004a4:	441c      	add	r4, r3
 80004a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004aa:	eba4 0408 	sub.w	r4, r4, r8
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	454c      	cmp	r4, r9
 80004b4:	46c6      	mov	lr, r8
 80004b6:	464d      	mov	r5, r9
 80004b8:	d315      	bcc.n	80004e6 <__udivmoddi4+0x2ae>
 80004ba:	d012      	beq.n	80004e2 <__udivmoddi4+0x2aa>
 80004bc:	b156      	cbz	r6, 80004d4 <__udivmoddi4+0x29c>
 80004be:	ebba 030e 	subs.w	r3, sl, lr
 80004c2:	eb64 0405 	sbc.w	r4, r4, r5
 80004c6:	fa04 f707 	lsl.w	r7, r4, r7
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431f      	orrs	r7, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	6037      	str	r7, [r6, #0]
 80004d2:	6074      	str	r4, [r6, #4]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	4618      	mov	r0, r3
 80004dc:	e6f8      	b.n	80002d0 <__udivmoddi4+0x98>
 80004de:	4690      	mov	r8, r2
 80004e0:	e6e0      	b.n	80002a4 <__udivmoddi4+0x6c>
 80004e2:	45c2      	cmp	sl, r8
 80004e4:	d2ea      	bcs.n	80004bc <__udivmoddi4+0x284>
 80004e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ea:	eb69 0503 	sbc.w	r5, r9, r3
 80004ee:	3801      	subs	r0, #1
 80004f0:	e7e4      	b.n	80004bc <__udivmoddi4+0x284>
 80004f2:	4628      	mov	r0, r5
 80004f4:	e7d7      	b.n	80004a6 <__udivmoddi4+0x26e>
 80004f6:	4640      	mov	r0, r8
 80004f8:	e791      	b.n	800041e <__udivmoddi4+0x1e6>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e7be      	b.n	800047c <__udivmoddi4+0x244>
 80004fe:	4601      	mov	r1, r0
 8000500:	e778      	b.n	80003f4 <__udivmoddi4+0x1bc>
 8000502:	3802      	subs	r0, #2
 8000504:	443c      	add	r4, r7
 8000506:	e745      	b.n	8000394 <__udivmoddi4+0x15c>
 8000508:	4608      	mov	r0, r1
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xe6>
 800050c:	f1a8 0802 	sub.w	r8, r8, #2
 8000510:	443d      	add	r5, r7
 8000512:	e72b      	b.n	800036c <__udivmoddi4+0x134>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 if(htim->Instance == htim2.Instance)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b84      	ldr	r3, [pc, #528]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	429a      	cmp	r2, r3
 800052a:	d105      	bne.n	8000538 <HAL_TIM_PeriodElapsedCallback+0x20>
 {

   if(mod_valasztas)
 800052c:	4b83      	ldr	r3, [pc, #524]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x224>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <HAL_TIM_PeriodElapsedCallback+0x20>
   		nappali_mod();
 8000534:	f000 fd7e 	bl	8001034 <nappali_mod>
 }

 if(htim->Instance == htim4.Instance)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b80      	ldr	r3, [pc, #512]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	429a      	cmp	r2, r3
 8000542:	f040 80f4 	bne.w	800072e <HAL_TIM_PeriodElapsedCallback+0x216>
  {
	timer0_counter++;
 8000546:	4b7f      	ldr	r3, [pc, #508]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	3301      	adds	r3, #1
 800054c:	b29a      	uxth	r2, r3
 800054e:	4b7d      	ldr	r3, [pc, #500]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000550:	801a      	strh	r2, [r3, #0]
	if(timer0_counter==10000)
 8000552:	4b7c      	ldr	r3, [pc, #496]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	f242 7210 	movw	r2, #10000	; 0x2710
 800055a:	4293      	cmp	r3, r2
 800055c:	d105      	bne.n	800056a <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			pwm1=0;
 800055e:	4b7a      	ldr	r3, [pc, #488]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
			timer0_counter=0;
 8000564:	4b77      	ldr	r3, [pc, #476]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000566:	2200      	movs	r2, #0
 8000568:	801a      	strh	r2, [r3, #0]
		}
	if(timer0_counter>5000)
 800056a:	4b76      	ldr	r3, [pc, #472]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000572:	4293      	cmp	r3, r2
 8000574:	f240 80a8 	bls.w	80006c8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
	{
		timer0_counter_1++;
 8000578:	4b74      	ldr	r3, [pc, #464]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b72      	ldr	r3, [pc, #456]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000582:	701a      	strb	r2, [r3, #0]
		if(timer0_counter_1==100)
 8000584:	4b71      	ldr	r3, [pc, #452]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b64      	cmp	r3, #100	; 0x64
 800058a:	d10f      	bne.n	80005ac <HAL_TIM_PeriodElapsedCallback+0x94>
		{
			pwm1++;
 800058c:	4b6e      	ldr	r3, [pc, #440]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	3301      	adds	r3, #1
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b6c      	ldr	r3, [pc, #432]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000596:	701a      	strb	r2, [r3, #0]
			if(pwm1==50) pwm1=0;
 8000598:	4b6b      	ldr	r3, [pc, #428]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b32      	cmp	r3, #50	; 0x32
 800059e:	d102      	bne.n	80005a6 <HAL_TIM_PeriodElapsedCallback+0x8e>
 80005a0:	4b69      	ldr	r3, [pc, #420]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
			timer0_counter_1=0;
 80005a6:	4b69      	ldr	r3, [pc, #420]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
		}
		if(pwm1>timer0_counter_1)
 80005ac:	4b66      	ldr	r3, [pc, #408]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	4b66      	ldr	r3, [pc, #408]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d943      	bls.n	8000640 <HAL_TIM_PeriodElapsedCallback+0x128>
			{
				if(!mod_valasztas)//ejszaka
 80005b8:	4b60      	ldr	r3, [pc, #384]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d118      	bne.n	80005f2 <HAL_TIM_PeriodElapsedCallback+0xda>
				{
					HAL_GPIO_WritePin(LA_S_GPIO_Port,LA_S_Pin,1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	4862      	ldr	r0, [pc, #392]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80005c6:	f001 fa7f 	bl	8001ac8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LB_S_GPIO_Port,LB_S_Pin,1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2108      	movs	r1, #8
 80005ce:	4861      	ldr	r0, [pc, #388]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80005d0:	f001 fa7a 	bl	8001ac8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LC_S_GPIO_Port,LC_S_Pin,1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2120      	movs	r1, #32
 80005d8:	485f      	ldr	r0, [pc, #380]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80005da:	f001 fa75 	bl	8001ac8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD_S_GPIO_Port,LD_S_Pin,1);
 80005de:	2201      	movs	r2, #1
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	485e      	ldr	r0, [pc, #376]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80005e4:	f001 fa70 	bl	8001ac8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LE_S_GPIO_Port,LE_S_Pin,1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2101      	movs	r1, #1
 80005ec:	485c      	ldr	r0, [pc, #368]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80005ee:	f001 fa6b 	bl	8001ac8 <HAL_GPIO_WritePin>
				}
				if (led_pwm_allapot.led_g1_z)
 80005f2:	4b5c      	ldr	r3, [pc, #368]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d005      	beq.n	8000606 <HAL_TIM_PeriodElapsedCallback+0xee>
					HAL_GPIO_WritePin(LG1_Z_GPIO_Port,LG1_Z_Pin,1);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000600:	4857      	ldr	r0, [pc, #348]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000602:	f001 fa61 	bl	8001ac8 <HAL_GPIO_WritePin>
				if(led_pwm_allapot.led_g2_z)
 8000606:	4b57      	ldr	r3, [pc, #348]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d005      	beq.n	800061a <HAL_TIM_PeriodElapsedCallback+0x102>
					HAL_GPIO_WritePin(LG2_Z_GPIO_Port,LG2_Z_Pin,1);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000614:	484e      	ldr	r0, [pc, #312]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000616:	f001 fa57 	bl	8001ac8 <HAL_GPIO_WritePin>
				if(led_pwm_allapot.led_v_f)
 800061a:	4b52      	ldr	r3, [pc, #328]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d004      	beq.n	800062c <HAL_TIM_PeriodElapsedCallback+0x114>
					HAL_GPIO_WritePin(LV_F_GPIO_Port,LV_F_Pin,1);
 8000622:	2201      	movs	r2, #1
 8000624:	2120      	movs	r1, #32
 8000626:	484d      	ldr	r0, [pc, #308]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000628:	f001 fa4e 	bl	8001ac8 <HAL_GPIO_WritePin>
				if (Jon_a_vonat)
 800062c:	4b4e      	ldr	r3, [pc, #312]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d07c      	beq.n	800072e <HAL_TIM_PeriodElapsedCallback+0x216>
					HAL_GPIO_WritePin(LV_P1_GPIO_Port,LV_P1_Pin,1);
 8000634:	2201      	movs	r2, #1
 8000636:	2140      	movs	r1, #64	; 0x40
 8000638:	4848      	ldr	r0, [pc, #288]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800063a:	f001 fa45 	bl	8001ac8 <HAL_GPIO_WritePin>
					if(Jon_a_vonat)
					HAL_GPIO_WritePin(LV_P2_GPIO_Port,LV_P2_Pin,0);
				}
	}
  }
}
 800063e:	e076      	b.n	800072e <HAL_TIM_PeriodElapsedCallback+0x216>
				if(!mod_valasztas)//ejszaka
 8000640:	4b3e      	ldr	r3, [pc, #248]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d118      	bne.n	800067a <HAL_TIM_PeriodElapsedCallback+0x162>
					HAL_GPIO_WritePin(LA_S_GPIO_Port,LA_S_Pin,0);
 8000648:	2200      	movs	r2, #0
 800064a:	2180      	movs	r1, #128	; 0x80
 800064c:	4840      	ldr	r0, [pc, #256]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800064e:	f001 fa3b 	bl	8001ac8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LB_S_GPIO_Port,LB_S_Pin,0);
 8000652:	2200      	movs	r2, #0
 8000654:	2108      	movs	r1, #8
 8000656:	483f      	ldr	r0, [pc, #252]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000658:	f001 fa36 	bl	8001ac8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LC_S_GPIO_Port,LC_S_Pin,0);
 800065c:	2200      	movs	r2, #0
 800065e:	2120      	movs	r1, #32
 8000660:	483d      	ldr	r0, [pc, #244]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000662:	f001 fa31 	bl	8001ac8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD_S_GPIO_Port,LD_S_Pin,0);
 8000666:	2200      	movs	r2, #0
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	483c      	ldr	r0, [pc, #240]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800066c:	f001 fa2c 	bl	8001ac8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LE_S_GPIO_Port,LE_S_Pin,0);
 8000670:	2200      	movs	r2, #0
 8000672:	2101      	movs	r1, #1
 8000674:	483a      	ldr	r0, [pc, #232]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000676:	f001 fa27 	bl	8001ac8 <HAL_GPIO_WritePin>
				if (led_pwm_allapot.led_g1_z)
 800067a:	4b3a      	ldr	r3, [pc, #232]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d005      	beq.n	800068e <HAL_TIM_PeriodElapsedCallback+0x176>
					HAL_GPIO_WritePin(LG1_Z_GPIO_Port,LG1_Z_Pin,0);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000688:	4835      	ldr	r0, [pc, #212]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800068a:	f001 fa1d 	bl	8001ac8 <HAL_GPIO_WritePin>
				if(led_pwm_allapot.led_g2_z)
 800068e:	4b35      	ldr	r3, [pc, #212]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d005      	beq.n	80006a2 <HAL_TIM_PeriodElapsedCallback+0x18a>
					HAL_GPIO_WritePin(LG2_Z_GPIO_Port,LG2_Z_Pin,0);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069c:	482c      	ldr	r0, [pc, #176]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800069e:	f001 fa13 	bl	8001ac8 <HAL_GPIO_WritePin>
				if(led_pwm_allapot.led_v_f)
 80006a2:	4b30      	ldr	r3, [pc, #192]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d004      	beq.n	80006b4 <HAL_TIM_PeriodElapsedCallback+0x19c>
					HAL_GPIO_WritePin(LV_F_GPIO_Port,LV_F_Pin,0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2120      	movs	r1, #32
 80006ae:	482b      	ldr	r0, [pc, #172]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80006b0:	f001 fa0a 	bl	8001ac8 <HAL_GPIO_WritePin>
				if (Jon_a_vonat)
 80006b4:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d038      	beq.n	800072e <HAL_TIM_PeriodElapsedCallback+0x216>
					HAL_GPIO_WritePin(LV_P1_GPIO_Port,LV_P1_Pin,0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2140      	movs	r1, #64	; 0x40
 80006c0:	4826      	ldr	r0, [pc, #152]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80006c2:	f001 fa01 	bl	8001ac8 <HAL_GPIO_WritePin>
}
 80006c6:	e032      	b.n	800072e <HAL_TIM_PeriodElapsedCallback+0x216>
				timer0_counter_2++;
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80006d2:	701a      	strb	r2, [r3, #0]
				if(timer0_counter_2==100)
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b64      	cmp	r3, #100	; 0x64
 80006da:	d10f      	bne.n	80006fc <HAL_TIM_PeriodElapsedCallback+0x1e4>
					pwm2++;
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80006e6:	701a      	strb	r2, [r3, #0]
					if(pwm2==50) pwm2=0;
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b32      	cmp	r3, #50	; 0x32
 80006ee:	d102      	bne.n	80006f6 <HAL_TIM_PeriodElapsedCallback+0x1de>
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
					timer0_counter_2=0;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
				if(pwm2>timer0_counter_2)
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	d909      	bls.n	800071c <HAL_TIM_PeriodElapsedCallback+0x204>
					if(Jon_a_vonat)
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d00e      	beq.n	800072e <HAL_TIM_PeriodElapsedCallback+0x216>
					HAL_GPIO_WritePin(LV_P2_GPIO_Port,LV_P2_Pin,1);
 8000710:	2201      	movs	r2, #1
 8000712:	2120      	movs	r1, #32
 8000714:	4817      	ldr	r0, [pc, #92]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000716:	f001 f9d7 	bl	8001ac8 <HAL_GPIO_WritePin>
}
 800071a:	e008      	b.n	800072e <HAL_TIM_PeriodElapsedCallback+0x216>
					if(Jon_a_vonat)
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d004      	beq.n	800072e <HAL_TIM_PeriodElapsedCallback+0x216>
					HAL_GPIO_WritePin(LV_P2_GPIO_Port,LV_P2_Pin,0);
 8000724:	2200      	movs	r2, #0
 8000726:	2120      	movs	r1, #32
 8000728:	4812      	ldr	r0, [pc, #72]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800072a:	f001 f9cd 	bl	8001ac8 <HAL_GPIO_WritePin>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000294 	.word	0x20000294
 800073c:	20000210 	.word	0x20000210
 8000740:	20000248 	.word	0x20000248
 8000744:	20000242 	.word	0x20000242
 8000748:	20000240 	.word	0x20000240
 800074c:	20000244 	.word	0x20000244
 8000750:	40020c00 	.word	0x40020c00
 8000754:	40020800 	.word	0x40020800
 8000758:	40021000 	.word	0x40021000
 800075c:	40020000 	.word	0x40020000
 8000760:	40021400 	.word	0x40021400
 8000764:	20000000 	.word	0x20000000
 8000768:	20000246 	.word	0x20000246
 800076c:	20000245 	.word	0x20000245
 8000770:	20000241 	.word	0x20000241
 8000774:	40020400 	.word	0x40020400

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800077e:	f000 fd17 	bl	80011b0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000782:	f000 fdf9 	bl	8001378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000786:	f000 f91f 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 fa15 	bl	8000bb8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800078e:	f000 f977 	bl	8000a80 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000792:	f000 f9c3 	bl	8000b1c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000796:	4880      	ldr	r0, [pc, #512]	; (8000998 <main+0x220>)
 8000798:	f001 fe4e 	bl	8002438 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800079c:	487f      	ldr	r0, [pc, #508]	; (800099c <main+0x224>)
 800079e:	f001 fe4b 	bl	8002438 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t button_tmp;

  uint8_t regi_vonat_gomb1=0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	71bb      	strb	r3, [r7, #6]
  uint8_t vonat_but=0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	717b      	strb	r3, [r7, #5]
  while (1)
  {

	  vonat_but=0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	717b      	strb	r3, [r7, #5]
	  if(!HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin))
 80007ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b2:	487b      	ldr	r0, [pc, #492]	; (80009a0 <main+0x228>)
 80007b4:	f001 f970 	bl	8001a98 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d10a      	bne.n	80007d4 <main+0x5c>
	  {
		  while(!HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin));
 80007be:	bf00      	nop
 80007c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c4:	4876      	ldr	r0, [pc, #472]	; (80009a0 <main+0x228>)
 80007c6:	f001 f967 	bl	8001a98 <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0f7      	beq.n	80007c0 <main+0x48>
		  vonat_but=1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	717b      	strb	r3, [r7, #5]
	  }

	  if(!HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin))
 80007d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d8:	4872      	ldr	r0, [pc, #456]	; (80009a4 <main+0x22c>)
 80007da:	f001 f95d 	bl	8001a98 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10a      	bne.n	80007fa <main+0x82>
	  {
	  	  while(!HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin));
 80007e4:	bf00      	nop
 80007e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ea:	486e      	ldr	r0, [pc, #440]	; (80009a4 <main+0x22c>)
 80007ec:	f001 f954 	bl	8001a98 <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f7      	beq.n	80007e6 <main+0x6e>
	  	  vonat_but=2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	717b      	strb	r3, [r7, #5]
	  }
	  if(HAL_GPIO_ReadPin(OnBoard_but_GPIO_Port,OnBoard_but_Pin))
 80007fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fe:	486a      	ldr	r0, [pc, #424]	; (80009a8 <main+0x230>)
 8000800:	f001 f94a 	bl	8001a98 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	f000 8090 	beq.w	800092c <main+0x1b4>
	  {
		  while(HAL_GPIO_ReadPin(OnBoard_but_GPIO_Port,OnBoard_but_Pin));
 800080c:	bf00      	nop
 800080e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000812:	4865      	ldr	r0, [pc, #404]	; (80009a8 <main+0x230>)
 8000814:	f001 f940 	bl	8001a98 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f7      	bne.n	800080e <main+0x96>
		  button_tmp=(button_tmp+1)%2;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	3301      	adds	r3, #1
 8000822:	2b00      	cmp	r3, #0
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	bfb8      	it	lt
 800082a:	425b      	neglt	r3, r3
 800082c:	71fb      	strb	r3, [r7, #7]
		  switch(button_tmp)
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <main+0xc2>
 8000834:	2b01      	cmp	r3, #1
 8000836:	d007      	beq.n	8000848 <main+0xd0>
		  				HAL_GPIO_WritePin(LG1_P_GPIO_Port, LG1_P_Pin, 0);
		  				HAL_GPIO_WritePin(LG2_P_GPIO_Port, LG2_P_Pin, 0);
		  				HAL_GPIO_WritePin(LG1_Z_GPIO_Port, LG1_Z_Pin, 0);
		  				HAL_GPIO_WritePin(LG2_Z_GPIO_Port, LG2_Z_Pin, 0);
		  				mod_valasztas=0; i=0; break;
		  				default: break;
 8000838:	e078      	b.n	800092c <main+0x1b4>
		  				case 0: mod_valasztas=1; i=0; break;
 800083a:	4b5c      	ldr	r3, [pc, #368]	; (80009ac <main+0x234>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	4b5b      	ldr	r3, [pc, #364]	; (80009b0 <main+0x238>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	e071      	b.n	800092c <main+0x1b4>
		  				HAL_GPIO_WritePin(LA_P_GPIO_Port, LA_P_Pin, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2108      	movs	r1, #8
 800084c:	4859      	ldr	r0, [pc, #356]	; (80009b4 <main+0x23c>)
 800084e:	f001 f93b 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LA_S_GPIO_Port, LA_S_Pin, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	4858      	ldr	r0, [pc, #352]	; (80009b8 <main+0x240>)
 8000858:	f001 f936 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LA_Z_GPIO_Port, LA_Z_Pin, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2101      	movs	r1, #1
 8000860:	4851      	ldr	r0, [pc, #324]	; (80009a8 <main+0x230>)
 8000862:	f001 f931 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LB_P_GPIO_Port, LB_P_Pin, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2140      	movs	r1, #64	; 0x40
 800086a:	4853      	ldr	r0, [pc, #332]	; (80009b8 <main+0x240>)
 800086c:	f001 f92c 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LB_S_GPIO_Port, LB_S_Pin, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2108      	movs	r1, #8
 8000874:	484c      	ldr	r0, [pc, #304]	; (80009a8 <main+0x230>)
 8000876:	f001 f927 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LB_Z_GPIO_Port, LB_Z_Pin, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	484e      	ldr	r0, [pc, #312]	; (80009b8 <main+0x240>)
 8000880:	f001 f922 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LB_Z2_GPIO_Port,LB_Z2_Pin, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2108      	movs	r1, #8
 8000888:	4845      	ldr	r0, [pc, #276]	; (80009a0 <main+0x228>)
 800088a:	f001 f91d 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LD_P_GPIO_Port, LD_P_Pin, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2110      	movs	r1, #16
 8000892:	4849      	ldr	r0, [pc, #292]	; (80009b8 <main+0x240>)
 8000894:	f001 f918 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LD_S_GPIO_Port, LD_S_Pin, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	4845      	ldr	r0, [pc, #276]	; (80009b4 <main+0x23c>)
 800089e:	f001 f913 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LD_Z_GPIO_Port, LD_Z_Pin, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2110      	movs	r1, #16
 80008a6:	483f      	ldr	r0, [pc, #252]	; (80009a4 <main+0x22c>)
 80008a8:	f001 f90e 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LC_P_GPIO_Port, LC_P_Pin, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2104      	movs	r1, #4
 80008b0:	483b      	ldr	r0, [pc, #236]	; (80009a0 <main+0x228>)
 80008b2:	f001 f909 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LC_S_GPIO_Port, LC_S_Pin, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	483a      	ldr	r0, [pc, #232]	; (80009a4 <main+0x22c>)
 80008bc:	f001 f904 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LC_Z_GPIO_Port, LC_Z_Pin, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2102      	movs	r1, #2
 80008c4:	4836      	ldr	r0, [pc, #216]	; (80009a0 <main+0x228>)
 80008c6:	f001 f8ff 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LE_P_GPIO_Port, LE_P_Pin, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2140      	movs	r1, #64	; 0x40
 80008ce:	4835      	ldr	r0, [pc, #212]	; (80009a4 <main+0x22c>)
 80008d0:	f001 f8fa 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LE_S_GPIO_Port, LE_S_Pin, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2101      	movs	r1, #1
 80008d8:	4831      	ldr	r0, [pc, #196]	; (80009a0 <main+0x228>)
 80008da:	f001 f8f5 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LE_Z_GPIO_Port, LE_Z_Pin, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2108      	movs	r1, #8
 80008e2:	4830      	ldr	r0, [pc, #192]	; (80009a4 <main+0x22c>)
 80008e4:	f001 f8f0 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LE_Z2_GPIO_Port, LE_Z2_Pin, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	482e      	ldr	r0, [pc, #184]	; (80009a8 <main+0x230>)
 80008ee:	f001 f8eb 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LG1_P_GPIO_Port, LG1_P_Pin, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2110      	movs	r1, #16
 80008f6:	4831      	ldr	r0, [pc, #196]	; (80009bc <main+0x244>)
 80008f8:	f001 f8e6 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LG2_P_GPIO_Port, LG2_P_Pin, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	482c      	ldr	r0, [pc, #176]	; (80009b4 <main+0x23c>)
 8000902:	f001 f8e1 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LG1_Z_GPIO_Port, LG1_Z_Pin, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090c:	4824      	ldr	r0, [pc, #144]	; (80009a0 <main+0x228>)
 800090e:	f001 f8db 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				HAL_GPIO_WritePin(LG2_Z_GPIO_Port, LG2_Z_Pin, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000918:	4827      	ldr	r0, [pc, #156]	; (80009b8 <main+0x240>)
 800091a:	f001 f8d5 	bl	8001ac8 <HAL_GPIO_WritePin>
		  				mod_valasztas=0; i=0; break;
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <main+0x234>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <main+0x238>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	bf00      	nop

	  }



		if(vonat_but)
 800092c:	797b      	ldrb	r3, [r7, #5]
 800092e:	2b00      	cmp	r3, #0
 8000930:	f43f af3b 	beq.w	80007aa <main+0x32>
		{
			if((!Jon_a_vonat)&&(!regi_vonat_gomb1))
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <main+0x248>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10f      	bne.n	800095c <main+0x1e4>
 800093c:	79bb      	ldrb	r3, [r7, #6]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d10c      	bne.n	800095c <main+0x1e4>
			{
				regi_vonat_gomb1=vonat_but;
 8000942:	797b      	ldrb	r3, [r7, #5]
 8000944:	71bb      	strb	r3, [r7, #6]
				Jon_a_vonat=1;
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <main+0x248>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LV_F_GPIO_Port,LV_F_Pin,0);
 800094c:	2200      	movs	r2, #0
 800094e:	2120      	movs	r1, #32
 8000950:	4818      	ldr	r0, [pc, #96]	; (80009b4 <main+0x23c>)
 8000952:	f001 f8b9 	bl	8001ac8 <HAL_GPIO_WritePin>
				led_pwm_allapot.led_v_f=0;
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <main+0x24c>)
 8000958:	2200      	movs	r2, #0
 800095a:	711a      	strb	r2, [r3, #4]
			}
			if(Jon_a_vonat&&(regi_vonat_gomb1!=vonat_but))
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <main+0x248>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	f43f af22 	beq.w	80007aa <main+0x32>
 8000966:	79ba      	ldrb	r2, [r7, #6]
 8000968:	797b      	ldrb	r3, [r7, #5]
 800096a:	429a      	cmp	r2, r3
 800096c:	f43f af1d 	beq.w	80007aa <main+0x32>
			{
				regi_vonat_gomb1=0;
 8000970:	2300      	movs	r3, #0
 8000972:	71bb      	strb	r3, [r7, #6]
				Jon_a_vonat=0;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <main+0x248>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LV_P1_GPIO_Port,LV_P1_Pin,0);
 800097a:	2200      	movs	r2, #0
 800097c:	2140      	movs	r1, #64	; 0x40
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <main+0x23c>)
 8000980:	f001 f8a2 	bl	8001ac8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LV_P2_GPIO_Port,LV_P2_Pin,0);
 8000984:	2200      	movs	r2, #0
 8000986:	2120      	movs	r1, #32
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <main+0x244>)
 800098a:	f001 f89d 	bl	8001ac8 <HAL_GPIO_WritePin>
				led_pwm_allapot.led_v_f=1;
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <main+0x24c>)
 8000990:	2201      	movs	r2, #1
 8000992:	711a      	strb	r2, [r3, #4]
	  vonat_but=0;
 8000994:	e709      	b.n	80007aa <main+0x32>
 8000996:	bf00      	nop
 8000998:	20000294 	.word	0x20000294
 800099c:	20000248 	.word	0x20000248
 80009a0:	40021400 	.word	0x40021400
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40020800 	.word	0x40020800
 80009ac:	20000210 	.word	0x20000210
 80009b0:	2000023c 	.word	0x2000023c
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020c00 	.word	0x40020c00
 80009bc:	40020400 	.word	0x40020400
 80009c0:	20000246 	.word	0x20000246
 80009c4:	20000000 	.word	0x20000000

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b094      	sub	sp, #80	; 0x50
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	2230      	movs	r2, #48	; 0x30
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 f9e0 	bl	8002d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <SystemClock_Config+0xb0>)
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <SystemClock_Config+0xb0>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <SystemClock_Config+0xb0>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <SystemClock_Config+0xb4>)
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <SystemClock_Config+0xb4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <SystemClock_Config+0xb4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a30:	f107 0320 	add.w	r3, r7, #32
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 f861 	bl	8001afc <HAL_RCC_OscConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a40:	f000 fbe2 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a44:	230f      	movs	r3, #15
 8000a46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 faf0 	bl	8002044 <HAL_RCC_ClockConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a6a:	f000 fbcd 	bl	8001208 <Error_Handler>
  }
}
 8000a6e:	bf00      	nop
 8000a70:	3750      	adds	r7, #80	; 0x50
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40007000 	.word	0x40007000

08000a80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000aa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000aa8:	f240 623f 	movw	r2, #1599	; 0x63f
 8000aac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ab6:	f241 3287 	movw	r2, #4999	; 0x1387
 8000aba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ac8:	4813      	ldr	r0, [pc, #76]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000aca:	f001 fc5d 	bl	8002388 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 fb98 	bl	8001208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ae6:	f001 fe3f 	bl	8002768 <HAL_TIM_ConfigClockSource>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000af0:	f000 fb8a 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000b02:	f002 f851 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b0c:	f000 fb7c 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000294 	.word	0x20000294

08000b1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <MX_TIM4_Init+0x98>)
 8000b3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1599;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b42:	f240 623f 	movw	r2, #1599	; 0x63f
 8000b46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b62:	f001 fc11 	bl	8002388 <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000b6c:	f000 fb4c 	bl	8001208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b7e:	f001 fdf3 	bl	8002768 <HAL_TIM_ConfigClockSource>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000b88:	f000 fb3e 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b9a:	f002 f805 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ba4:	f000 fb30 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3720      	adds	r7, #32
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000248 	.word	0x20000248
 8000bb4:	40000800 	.word	0x40000800

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bce:	4a82      	ldr	r2, [pc, #520]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000bd0:	4b81      	ldr	r3, [pc, #516]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b7f      	ldr	r3, [pc, #508]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4a7c      	ldr	r2, [pc, #496]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000be8:	4b7b      	ldr	r3, [pc, #492]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b79      	ldr	r3, [pc, #484]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfe:	4a76      	ldr	r2, [pc, #472]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000c00:	4b75      	ldr	r3, [pc, #468]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b73      	ldr	r3, [pc, #460]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0320 	and.w	r3, r3, #32
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4a70      	ldr	r2, [pc, #448]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000c18:	4b6f      	ldr	r3, [pc, #444]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b6d      	ldr	r3, [pc, #436]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4a6a      	ldr	r2, [pc, #424]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000c30:	4b69      	ldr	r3, [pc, #420]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b67      	ldr	r3, [pc, #412]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	4a64      	ldr	r2, [pc, #400]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000c48:	4b63      	ldr	r3, [pc, #396]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b61      	ldr	r3, [pc, #388]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LE_Z_Pin|LD_Z_Pin|LC_S_Pin|LE_P_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2178      	movs	r1, #120	; 0x78
 8000c62:	485e      	ldr	r0, [pc, #376]	; (8000ddc <MX_GPIO_Init+0x224>)
 8000c64:	f000 ff30 	bl	8001ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LE_S_Pin|LC_Z_Pin|LC_P_Pin|LB_Z2_Pin
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f241 010f 	movw	r1, #4111	; 0x100f
 8000c6e:	485c      	ldr	r0, [pc, #368]	; (8000de0 <MX_GPIO_Init+0x228>)
 8000c70:	f000 ff2a 	bl	8001ac8 <HAL_GPIO_WritePin>
                          |LG1_Z_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LA_Z_Pin|LB_S_Pin|LE_Z2_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2189      	movs	r1, #137	; 0x89
 8000c78:	485a      	ldr	r0, [pc, #360]	; (8000de4 <MX_GPIO_Init+0x22c>)
 8000c7a:	f000 ff25 	bl	8001ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LA_P_Pin|LG2_P_Pin|LV_F_Pin|LV_P1_Pin
 8000c7e:	2200      	movs	r2, #0
 8000c80:	21f8      	movs	r1, #248	; 0xf8
 8000c82:	4859      	ldr	r0, [pc, #356]	; (8000de8 <MX_GPIO_Init+0x230>)
 8000c84:	f000 ff20 	bl	8001ac8 <HAL_GPIO_WritePin>
                          |LD_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDgreen_Pin|LEDred_Pin|LG1_P_Pin|LV_P2_Pin
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f244 01b1 	movw	r1, #16561	; 0x40b1
 8000c8e:	4857      	ldr	r0, [pc, #348]	; (8000dec <MX_GPIO_Init+0x234>)
 8000c90:	f000 ff1a 	bl	8001ac8 <HAL_GPIO_WritePin>
                          |LEDblue_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LG2_Z_Pin|LD_P_Pin|LB_Z_Pin|LB_P_Pin
 8000c94:	2200      	movs	r2, #0
 8000c96:	f248 01f0 	movw	r1, #33008	; 0x80f0
 8000c9a:	4855      	ldr	r0, [pc, #340]	; (8000df0 <MX_GPIO_Init+0x238>)
 8000c9c:	f000 ff14 	bl	8001ac8 <HAL_GPIO_WritePin>
                          |LA_S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LE_Z_Pin LD_Z_Pin LC_S_Pin LE_P_Pin */
  GPIO_InitStruct.Pin = LE_Z_Pin|LD_Z_Pin|LC_S_Pin|LE_P_Pin;
 8000ca0:	2378      	movs	r3, #120	; 0x78
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4849      	ldr	r0, [pc, #292]	; (8000ddc <MX_GPIO_Init+0x224>)
 8000cb8:	f000 fd44 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : OnBoard_but_Pin */
  GPIO_InitStruct.Pin = OnBoard_but_Pin;
 8000cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OnBoard_but_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4844      	ldr	r0, [pc, #272]	; (8000de4 <MX_GPIO_Init+0x22c>)
 8000cd2:	f000 fd37 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : LE_S_Pin LC_Z_Pin LC_P_Pin LB_Z2_Pin
                           LG1_Z_Pin */
  GPIO_InitStruct.Pin = LE_S_Pin|LC_Z_Pin|LC_P_Pin|LB_Z2_Pin
 8000cd6:	f241 030f 	movw	r3, #4111	; 0x100f
 8000cda:	61fb      	str	r3, [r7, #28]
                          |LG1_Z_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	483c      	ldr	r0, [pc, #240]	; (8000de0 <MX_GPIO_Init+0x228>)
 8000cf0:	f000 fd28 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : LA_Z_Pin LB_S_Pin LE_Z2_Pin */
  GPIO_InitStruct.Pin = LA_Z_Pin|LB_S_Pin|LE_Z2_Pin;
 8000cf4:	2389      	movs	r3, #137	; 0x89
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4836      	ldr	r0, [pc, #216]	; (8000de4 <MX_GPIO_Init+0x22c>)
 8000d0c:	f000 fd1a 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : LA_P_Pin LG2_P_Pin LV_F_Pin LV_P1_Pin
                           LD_S_Pin */
  GPIO_InitStruct.Pin = LA_P_Pin|LG2_P_Pin|LV_F_Pin|LV_P1_Pin
 8000d10:	23f8      	movs	r3, #248	; 0xf8
 8000d12:	61fb      	str	r3, [r7, #28]
                          |LD_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4830      	ldr	r0, [pc, #192]	; (8000de8 <MX_GPIO_Init+0x230>)
 8000d28:	f000 fd0c 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDgreen_Pin LEDred_Pin LG1_P_Pin LV_P2_Pin
                           LEDblue_Pin */
  GPIO_InitStruct.Pin = LEDgreen_Pin|LEDred_Pin|LG1_P_Pin|LV_P2_Pin
 8000d2c:	f244 03b1 	movw	r3, #16561	; 0x40b1
 8000d30:	61fb      	str	r3, [r7, #28]
                          |LEDblue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	4829      	ldr	r0, [pc, #164]	; (8000dec <MX_GPIO_Init+0x234>)
 8000d46:	f000 fcfd 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000d4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4820      	ldr	r0, [pc, #128]	; (8000de0 <MX_GPIO_Init+0x228>)
 8000d60:	f000 fcf0 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button2_Pin */
  GPIO_InitStruct.Pin = Button2_Pin;
 8000d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button2_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	4818      	ldr	r0, [pc, #96]	; (8000ddc <MX_GPIO_Init+0x224>)
 8000d7a:	f000 fce3 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTNV2_Pin */
  GPIO_InitStruct.Pin = BTNV2_Pin;
 8000d7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTNV2_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4817      	ldr	r0, [pc, #92]	; (8000df0 <MX_GPIO_Init+0x238>)
 8000d94:	f000 fcd6 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : LG2_Z_Pin LD_P_Pin LB_Z_Pin LB_P_Pin
                           LA_S_Pin */
  GPIO_InitStruct.Pin = LG2_Z_Pin|LD_P_Pin|LB_Z_Pin|LB_P_Pin
 8000d98:	f248 03f0 	movw	r3, #33008	; 0x80f0
 8000d9c:	61fb      	str	r3, [r7, #28]
                          |LA_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	480f      	ldr	r0, [pc, #60]	; (8000df0 <MX_GPIO_Init+0x238>)
 8000db2:	f000 fcc7 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTNV1_Pin */
  GPIO_InitStruct.Pin = BTNV1_Pin;
 8000db6:	2308      	movs	r3, #8
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTNV1_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4808      	ldr	r0, [pc, #32]	; (8000dec <MX_GPIO_Init+0x234>)
 8000dca:	f000 fcbb 	bl	8001744 <HAL_GPIO_Init>

}
 8000dce:	bf00      	nop
 8000dd0:	3730      	adds	r7, #48	; 0x30
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40021400 	.word	0x40021400
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020400 	.word	0x40020400
 8000df0:	40020c00 	.word	0x40020c00

08000df4 <do_traffic>:

/* USER CODE BEGIN 4 */

void do_traffic(allapot *mod)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LA_P_GPIO_Port, LA_P_Pin, mod[i].led_a_p);
 8000dfc:	4b86      	ldr	r3, [pc, #536]	; (8001018 <do_traffic+0x224>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	231a      	movs	r3, #26
 8000e04:	fb03 f302 	mul.w	r3, r3, r2
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2108      	movs	r1, #8
 8000e12:	4882      	ldr	r0, [pc, #520]	; (800101c <do_traffic+0x228>)
 8000e14:	f000 fe58 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LA_S_GPIO_Port, LA_S_Pin, mod[i].led_a_s);
 8000e18:	4b7f      	ldr	r3, [pc, #508]	; (8001018 <do_traffic+0x224>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	231a      	movs	r3, #26
 8000e20:	fb03 f302 	mul.w	r3, r3, r2
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	785b      	ldrb	r3, [r3, #1]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	487c      	ldr	r0, [pc, #496]	; (8001020 <do_traffic+0x22c>)
 8000e30:	f000 fe4a 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LA_Z_GPIO_Port, LA_Z_Pin, mod[i].led_a_z);
 8000e34:	4b78      	ldr	r3, [pc, #480]	; (8001018 <do_traffic+0x224>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	231a      	movs	r3, #26
 8000e3c:	fb03 f302 	mul.w	r3, r3, r2
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	789b      	ldrb	r3, [r3, #2]
 8000e46:	461a      	mov	r2, r3
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4876      	ldr	r0, [pc, #472]	; (8001024 <do_traffic+0x230>)
 8000e4c:	f000 fe3c 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_P_GPIO_Port, LB_P_Pin, mod[i].led_b_p);
 8000e50:	4b71      	ldr	r3, [pc, #452]	; (8001018 <do_traffic+0x224>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	231a      	movs	r3, #26
 8000e58:	fb03 f302 	mul.w	r3, r3, r2
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	78db      	ldrb	r3, [r3, #3]
 8000e62:	461a      	mov	r2, r3
 8000e64:	2140      	movs	r1, #64	; 0x40
 8000e66:	486e      	ldr	r0, [pc, #440]	; (8001020 <do_traffic+0x22c>)
 8000e68:	f000 fe2e 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_S_GPIO_Port, LB_S_Pin, mod[i].led_b_s);
 8000e6c:	4b6a      	ldr	r3, [pc, #424]	; (8001018 <do_traffic+0x224>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	231a      	movs	r3, #26
 8000e74:	fb03 f302 	mul.w	r3, r3, r2
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	791b      	ldrb	r3, [r3, #4]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	2108      	movs	r1, #8
 8000e82:	4868      	ldr	r0, [pc, #416]	; (8001024 <do_traffic+0x230>)
 8000e84:	f000 fe20 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_Z_GPIO_Port, LB_Z_Pin, mod[i].led_b_z);
 8000e88:	4b63      	ldr	r3, [pc, #396]	; (8001018 <do_traffic+0x224>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	231a      	movs	r3, #26
 8000e90:	fb03 f302 	mul.w	r3, r3, r2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	4413      	add	r3, r2
 8000e98:	795b      	ldrb	r3, [r3, #5]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	4860      	ldr	r0, [pc, #384]	; (8001020 <do_traffic+0x22c>)
 8000ea0:	f000 fe12 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LB_Z2_GPIO_Port,LB_Z2_Pin, mod[i].led_b_z2);
 8000ea4:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <do_traffic+0x224>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	231a      	movs	r3, #26
 8000eac:	fb03 f302 	mul.w	r3, r3, r2
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	799b      	ldrb	r3, [r3, #6]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	2108      	movs	r1, #8
 8000eba:	485b      	ldr	r0, [pc, #364]	; (8001028 <do_traffic+0x234>)
 8000ebc:	f000 fe04 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_P_GPIO_Port, LD_P_Pin, mod[i].led_d_p);
 8000ec0:	4b55      	ldr	r3, [pc, #340]	; (8001018 <do_traffic+0x224>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	231a      	movs	r3, #26
 8000ec8:	fb03 f302 	mul.w	r3, r3, r2
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	7a9b      	ldrb	r3, [r3, #10]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2110      	movs	r1, #16
 8000ed6:	4852      	ldr	r0, [pc, #328]	; (8001020 <do_traffic+0x22c>)
 8000ed8:	f000 fdf6 	bl	8001ac8 <HAL_GPIO_WritePin>
	(mod[i].led_b_z<<LB_Z)|
	(mod[i].led_b_z2<<LB_Z2)|
	(mod[i].led_d_p<<LD_P);
	*/

	HAL_GPIO_WritePin(LD_S_GPIO_Port, LD_S_Pin, mod[i].led_d_s);
 8000edc:	4b4e      	ldr	r3, [pc, #312]	; (8001018 <do_traffic+0x224>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	231a      	movs	r3, #26
 8000ee4:	fb03 f302 	mul.w	r3, r3, r2
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	4413      	add	r3, r2
 8000eec:	7adb      	ldrb	r3, [r3, #11]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	484a      	ldr	r0, [pc, #296]	; (800101c <do_traffic+0x228>)
 8000ef4:	f000 fde8 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_Z_GPIO_Port, LD_Z_Pin, mod[i].led_d_z);
 8000ef8:	4b47      	ldr	r3, [pc, #284]	; (8001018 <do_traffic+0x224>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	231a      	movs	r3, #26
 8000f00:	fb03 f302 	mul.w	r3, r3, r2
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	7b1b      	ldrb	r3, [r3, #12]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4847      	ldr	r0, [pc, #284]	; (800102c <do_traffic+0x238>)
 8000f10:	f000 fdda 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LC_P_GPIO_Port, LC_P_Pin, mod[i].led_c_p);
 8000f14:	4b40      	ldr	r3, [pc, #256]	; (8001018 <do_traffic+0x224>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	231a      	movs	r3, #26
 8000f1c:	fb03 f302 	mul.w	r3, r3, r2
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	79db      	ldrb	r3, [r3, #7]
 8000f26:	461a      	mov	r2, r3
 8000f28:	2104      	movs	r1, #4
 8000f2a:	483f      	ldr	r0, [pc, #252]	; (8001028 <do_traffic+0x234>)
 8000f2c:	f000 fdcc 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LC_S_GPIO_Port, LC_S_Pin, mod[i].led_c_s);
 8000f30:	4b39      	ldr	r3, [pc, #228]	; (8001018 <do_traffic+0x224>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	231a      	movs	r3, #26
 8000f38:	fb03 f302 	mul.w	r3, r3, r2
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	7a1b      	ldrb	r3, [r3, #8]
 8000f42:	461a      	mov	r2, r3
 8000f44:	2120      	movs	r1, #32
 8000f46:	4839      	ldr	r0, [pc, #228]	; (800102c <do_traffic+0x238>)
 8000f48:	f000 fdbe 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LC_Z_GPIO_Port, LC_Z_Pin, mod[i].led_c_z);
 8000f4c:	4b32      	ldr	r3, [pc, #200]	; (8001018 <do_traffic+0x224>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	231a      	movs	r3, #26
 8000f54:	fb03 f302 	mul.w	r3, r3, r2
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	7a5b      	ldrb	r3, [r3, #9]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2102      	movs	r1, #2
 8000f62:	4831      	ldr	r0, [pc, #196]	; (8001028 <do_traffic+0x234>)
 8000f64:	f000 fdb0 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_P_GPIO_Port, LE_P_Pin, mod[i].led_e_p);
 8000f68:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <do_traffic+0x224>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	231a      	movs	r3, #26
 8000f70:	fb03 f302 	mul.w	r3, r3, r2
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	4413      	add	r3, r2
 8000f78:	7b5b      	ldrb	r3, [r3, #13]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	2140      	movs	r1, #64	; 0x40
 8000f7e:	482b      	ldr	r0, [pc, #172]	; (800102c <do_traffic+0x238>)
 8000f80:	f000 fda2 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_S_GPIO_Port, LE_S_Pin, mod[i].led_e_s);
 8000f84:	4b24      	ldr	r3, [pc, #144]	; (8001018 <do_traffic+0x224>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	231a      	movs	r3, #26
 8000f8c:	fb03 f302 	mul.w	r3, r3, r2
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	7b9b      	ldrb	r3, [r3, #14]
 8000f96:	461a      	mov	r2, r3
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4823      	ldr	r0, [pc, #140]	; (8001028 <do_traffic+0x234>)
 8000f9c:	f000 fd94 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_Z_GPIO_Port, LE_Z_Pin, mod[i].led_e_z);
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <do_traffic+0x224>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	231a      	movs	r3, #26
 8000fa8:	fb03 f302 	mul.w	r3, r3, r2
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	7bdb      	ldrb	r3, [r3, #15]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	2108      	movs	r1, #8
 8000fb6:	481d      	ldr	r0, [pc, #116]	; (800102c <do_traffic+0x238>)
 8000fb8:	f000 fd86 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_Z2_GPIO_Port, LE_Z2_Pin, mod[i].led_e_z2);
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <do_traffic+0x224>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	231a      	movs	r3, #26
 8000fc4:	fb03 f302 	mul.w	r3, r3, r2
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	7c1b      	ldrb	r3, [r3, #16]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	4814      	ldr	r0, [pc, #80]	; (8001024 <do_traffic+0x230>)
 8000fd4:	f000 fd78 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LG1_P_GPIO_Port, LG1_P_Pin, mod[i].led_g1_p);
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <do_traffic+0x224>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	231a      	movs	r3, #26
 8000fe0:	fb03 f302 	mul.w	r3, r3, r2
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	7c5b      	ldrb	r3, [r3, #17]
 8000fea:	461a      	mov	r2, r3
 8000fec:	2110      	movs	r1, #16
 8000fee:	4810      	ldr	r0, [pc, #64]	; (8001030 <do_traffic+0x23c>)
 8000ff0:	f000 fd6a 	bl	8001ac8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LG2_P_GPIO_Port, LG2_P_Pin, mod[i].led_g2_p);
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <do_traffic+0x224>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	231a      	movs	r3, #26
 8000ffc:	fb03 f302 	mul.w	r3, r3, r2
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	7cdb      	ldrb	r3, [r3, #19]
 8001006:	461a      	mov	r2, r3
 8001008:	2110      	movs	r1, #16
 800100a:	4804      	ldr	r0, [pc, #16]	; (800101c <do_traffic+0x228>)
 800100c:	f000 fd5c 	bl	8001ac8 <HAL_GPIO_WritePin>
	(mod[i].led_c_z<<LC_Z)|
	(mod[i].led_e_p<<LE_P)|
	(mod[i].led_e_s<<LE_S)|
	(mod[i].led_e_z<<LE_Z);
	*/
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000023c 	.word	0x2000023c
 800101c:	40020000 	.word	0x40020000
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40020800 	.word	0x40020800
 8001028:	40021400 	.word	0x40021400
 800102c:	40021000 	.word	0x40021000
 8001030:	40020400 	.word	0x40020400

08001034 <nappali_mod>:


void nappali_mod(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

	if(i==0)
 8001038:	4b56      	ldr	r3, [pc, #344]	; (8001194 <nappali_mod+0x160>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10a      	bne.n	8001056 <nappali_mod+0x22>
	{
		if(Jon_a_vonat)
 8001040:	4b55      	ldr	r3, [pc, #340]	; (8001198 <nappali_mod+0x164>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <nappali_mod+0x1c>
			do_traffic(nappali_v);
 8001048:	4854      	ldr	r0, [pc, #336]	; (800119c <nappali_mod+0x168>)
 800104a:	f7ff fed3 	bl	8000df4 <do_traffic>
 800104e:	e002      	b.n	8001056 <nappali_mod+0x22>
		else
			do_traffic(nappali);
 8001050:	4853      	ldr	r0, [pc, #332]	; (80011a0 <nappali_mod+0x16c>)
 8001052:	f7ff fecf 	bl	8000df4 <do_traffic>
	}
	if(nappali[i].szamlalo_tmp<nappali[i].szamlalo)
 8001056:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <nappali_mod+0x160>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a51      	ldr	r2, [pc, #324]	; (80011a0 <nappali_mod+0x16c>)
 800105c:	211a      	movs	r1, #26
 800105e:	fb01 f303 	mul.w	r3, r1, r3
 8001062:	4413      	add	r3, r2
 8001064:	3319      	adds	r3, #25
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	4b4a      	ldr	r3, [pc, #296]	; (8001194 <nappali_mod+0x160>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	494c      	ldr	r1, [pc, #304]	; (80011a0 <nappali_mod+0x16c>)
 800106e:	201a      	movs	r0, #26
 8001070:	fb00 f303 	mul.w	r3, r0, r3
 8001074:	440b      	add	r3, r1
 8001076:	3318      	adds	r3, #24
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d213      	bcs.n	80010a6 <nappali_mod+0x72>
	{
		nappali[i].szamlalo_tmp++;
 800107e:	4b45      	ldr	r3, [pc, #276]	; (8001194 <nappali_mod+0x160>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4947      	ldr	r1, [pc, #284]	; (80011a0 <nappali_mod+0x16c>)
 8001084:	221a      	movs	r2, #26
 8001086:	fb02 f203 	mul.w	r2, r2, r3
 800108a:	440a      	add	r2, r1
 800108c:	3219      	adds	r2, #25
 800108e:	7812      	ldrb	r2, [r2, #0]
 8001090:	3201      	adds	r2, #1
 8001092:	b2d0      	uxtb	r0, r2
 8001094:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <nappali_mod+0x16c>)
 8001096:	211a      	movs	r1, #26
 8001098:	fb01 f303 	mul.w	r3, r1, r3
 800109c:	4413      	add	r3, r2
 800109e:	3319      	adds	r3, #25
 80010a0:	4602      	mov	r2, r0
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e020      	b.n	80010e8 <nappali_mod+0xb4>
	}

	else
	{
		nappali[i].szamlalo_tmp=0;
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <nappali_mod+0x160>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a3d      	ldr	r2, [pc, #244]	; (80011a0 <nappali_mod+0x16c>)
 80010ac:	211a      	movs	r1, #26
 80010ae:	fb01 f303 	mul.w	r3, r1, r3
 80010b2:	4413      	add	r3, r2
 80010b4:	3319      	adds	r3, #25
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
		i++;
 80010ba:	4b36      	ldr	r3, [pc, #216]	; (8001194 <nappali_mod+0x160>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a34      	ldr	r2, [pc, #208]	; (8001194 <nappali_mod+0x160>)
 80010c2:	6013      	str	r3, [r2, #0]
		if(i==10)i=1;
 80010c4:	4b33      	ldr	r3, [pc, #204]	; (8001194 <nappali_mod+0x160>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b0a      	cmp	r3, #10
 80010ca:	d102      	bne.n	80010d2 <nappali_mod+0x9e>
 80010cc:	4b31      	ldr	r3, [pc, #196]	; (8001194 <nappali_mod+0x160>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	601a      	str	r2, [r3, #0]

		if(Jon_a_vonat)
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <nappali_mod+0x164>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <nappali_mod+0xae>
			do_traffic(nappali_v);
 80010da:	4830      	ldr	r0, [pc, #192]	; (800119c <nappali_mod+0x168>)
 80010dc:	f7ff fe8a 	bl	8000df4 <do_traffic>
 80010e0:	e002      	b.n	80010e8 <nappali_mod+0xb4>
		else
			do_traffic(nappali);
 80010e2:	482f      	ldr	r0, [pc, #188]	; (80011a0 <nappali_mod+0x16c>)
 80010e4:	f7ff fe86 	bl	8000df4 <do_traffic>
	}


	if(nappali[i].led_g1_z==2)led_pwm_allapot.led_g1_z=1;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <nappali_mod+0x160>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a2c      	ldr	r2, [pc, #176]	; (80011a0 <nappali_mod+0x16c>)
 80010ee:	211a      	movs	r1, #26
 80010f0:	fb01 f303 	mul.w	r3, r1, r3
 80010f4:	4413      	add	r3, r2
 80010f6:	3312      	adds	r3, #18
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d103      	bne.n	8001106 <nappali_mod+0xd2>
 80010fe:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <nappali_mod+0x170>)
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e01a      	b.n	800113c <nappali_mod+0x108>
	else if(nappali[i].led_g1_z==1) HAL_GPIO_WritePin(LG1_Z_GPIO_Port,LG1_Z_Pin,1);
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <nappali_mod+0x160>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a25      	ldr	r2, [pc, #148]	; (80011a0 <nappali_mod+0x16c>)
 800110c:	211a      	movs	r1, #26
 800110e:	fb01 f303 	mul.w	r3, r1, r3
 8001112:	4413      	add	r3, r2
 8001114:	3312      	adds	r3, #18
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d106      	bne.n	800112a <nappali_mod+0xf6>
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001122:	4821      	ldr	r0, [pc, #132]	; (80011a8 <nappali_mod+0x174>)
 8001124:	f000 fcd0 	bl	8001ac8 <HAL_GPIO_WritePin>
 8001128:	e008      	b.n	800113c <nappali_mod+0x108>
	else
	{
      led_pwm_allapot.led_g1_z=0;
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <nappali_mod+0x170>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]

      HAL_GPIO_WritePin(LG1_Z_GPIO_Port,LG1_Z_Pin,0);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001136:	481c      	ldr	r0, [pc, #112]	; (80011a8 <nappali_mod+0x174>)
 8001138:	f000 fcc6 	bl	8001ac8 <HAL_GPIO_WritePin>
	}
	if(nappali[i].led_g2_z==2)led_pwm_allapot.led_g2_z=1;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <nappali_mod+0x160>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <nappali_mod+0x16c>)
 8001142:	211a      	movs	r1, #26
 8001144:	fb01 f303 	mul.w	r3, r1, r3
 8001148:	4413      	add	r3, r2
 800114a:	3314      	adds	r3, #20
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d103      	bne.n	800115a <nappali_mod+0x126>
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <nappali_mod+0x170>)
 8001154:	2201      	movs	r2, #1
 8001156:	705a      	strb	r2, [r3, #1]
	else
	{
		led_pwm_allapot.led_g2_z=0;
		HAL_GPIO_WritePin(LG2_Z_GPIO_Port,LG2_Z_Pin,0);
	}
}
 8001158:	e01a      	b.n	8001190 <nappali_mod+0x15c>
	else if(nappali[i].led_g2_z==1)HAL_GPIO_WritePin(LG2_Z_GPIO_Port,LG2_Z_Pin,1);
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <nappali_mod+0x160>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <nappali_mod+0x16c>)
 8001160:	211a      	movs	r1, #26
 8001162:	fb01 f303 	mul.w	r3, r1, r3
 8001166:	4413      	add	r3, r2
 8001168:	3314      	adds	r3, #20
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d106      	bne.n	800117e <nappali_mod+0x14a>
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <nappali_mod+0x178>)
 8001178:	f000 fca6 	bl	8001ac8 <HAL_GPIO_WritePin>
}
 800117c:	e008      	b.n	8001190 <nappali_mod+0x15c>
		led_pwm_allapot.led_g2_z=0;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <nappali_mod+0x170>)
 8001180:	2200      	movs	r2, #0
 8001182:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(LG2_Z_GPIO_Port,LG2_Z_Pin,0);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118a:	4808      	ldr	r0, [pc, #32]	; (80011ac <nappali_mod+0x178>)
 800118c:	f000 fc9c 	bl	8001ac8 <HAL_GPIO_WritePin>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000023c 	.word	0x2000023c
 8001198:	20000246 	.word	0x20000246
 800119c:	2000010c 	.word	0x2000010c
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000000 	.word	0x20000000
 80011a8:	40021400 	.word	0x40021400
 80011ac:	40020c00 	.word	0x40020c00

080011b0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80011c2:	f000 fa47 	bl	8001654 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011c6:	2301      	movs	r3, #1
 80011c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011d2:	231f      	movs	r3, #31
 80011d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80011d6:	2387      	movs	r3, #135	; 0x87
 80011d8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011da:	2300      	movs	r3, #0
 80011dc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011de:	2300      	movs	r3, #0
 80011e0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011e2:	2301      	movs	r3, #1
 80011e4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011e6:	2301      	movs	r3, #1
 80011e8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011f2:	463b      	mov	r3, r7
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fa61 	bl	80016bc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011fa:	2004      	movs	r0, #4
 80011fc:	f000 fa40 	bl	8001680 <HAL_MPU_Enable>

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120e:	e7fe      	b.n	800120e <Error_Handler+0x6>

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <HAL_MspInit+0x44>)
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_MspInit+0x44>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_MspInit+0x44>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_MspInit+0x44>)
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_MspInit+0x44>)
 8001232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_MspInit+0x44>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001268:	d114      	bne.n	8001294 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800126a:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <HAL_TIM_Base_MspInit+0x78>)
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_TIM_Base_MspInit+0x78>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_TIM_Base_MspInit+0x78>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	201c      	movs	r0, #28
 8001288:	f000 f9ad 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800128c:	201c      	movs	r0, #28
 800128e:	f000 f9c6 	bl	800161e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001292:	e018      	b.n	80012c6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <HAL_TIM_Base_MspInit+0x7c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d113      	bne.n	80012c6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_TIM_Base_MspInit+0x78>)
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_TIM_Base_MspInit+0x78>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_TIM_Base_MspInit+0x78>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	201e      	movs	r0, #30
 80012bc:	f000 f993 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012c0:	201e      	movs	r0, #30
 80012c2:	f000 f9ac 	bl	800161e <HAL_NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40000800 	.word	0x40000800

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001324:	f000 f866 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <TIM2_IRQHandler+0x10>)
 8001332:	f001 f8f9 	bl	8002528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000294 	.word	0x20000294

08001340 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <TIM4_IRQHandler+0x10>)
 8001346:	f001 f8ef 	bl	8002528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000248 	.word	0x20000248

08001354 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <SystemInit+0x20>)
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <SystemInit+0x20>)
 800135c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 f927 	bl	80015d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001382:	200f      	movs	r0, #15
 8001384:	f000 f806 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001388:	f7ff ff42 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f941 	bl	800163a <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f909 	bl	80015e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000214 	.word	0x20000214
 80013ec:	2000021c 	.word	0x2000021c
 80013f0:	20000218 	.word	0x20000218

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	2000021c 	.word	0x2000021c
 8001418:	200002e0 	.word	0x200002e0

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	200002e0 	.word	0x200002e0

08001434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <__NVIC_SetPriorityGrouping+0x40>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	4313      	orrs	r3, r2
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x40>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00
 8001478:	05fa0000 	.word	0x05fa0000

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db0b      	blt.n	80014c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	4909      	ldr	r1, [pc, #36]	; (80014d0 <__NVIC_EnableIRQ+0x38>)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	095b      	lsrs	r3, r3, #5
 80014b2:	79fa      	ldrb	r2, [r7, #7]
 80014b4:	f002 021f 	and.w	r2, r2, #31
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	db0a      	blt.n	80014fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	490d      	ldr	r1, [pc, #52]	; (8001520 <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	0112      	lsls	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014fc:	e00a      	b.n	8001514 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	4909      	ldr	r1, [pc, #36]	; (8001524 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	440b      	add	r3, r1
 8001512:	761a      	strb	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f1c3 0307 	rsb	r3, r3, #7
 8001542:	2b04      	cmp	r3, #4
 8001544:	bf28      	it	cs
 8001546:	2304      	movcs	r3, #4
 8001548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3304      	adds	r3, #4
 800154e:	2b06      	cmp	r3, #6
 8001550:	d902      	bls.n	8001558 <NVIC_EncodePriority+0x30>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3b03      	subs	r3, #3
 8001556:	e000      	b.n	800155a <NVIC_EncodePriority+0x32>
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	2201      	movs	r2, #1
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	401a      	ands	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156e:	2101      	movs	r1, #1
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	1e59      	subs	r1, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800159c:	d301      	bcc.n	80015a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159e:	2301      	movs	r3, #1
 80015a0:	e00f      	b.n	80015c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <SysTick_Config+0x40>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015aa:	210f      	movs	r1, #15
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f7ff ff90 	bl	80014d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SysTick_Config+0x40>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <SysTick_Config+0x40>)
 80015bc:	2207      	movs	r2, #7
 80015be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff2b 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f8:	f7ff ff40 	bl	800147c <__NVIC_GetPriorityGrouping>
 80015fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff ff90 	bl	8001528 <NVIC_EncodePriority>
 8001608:	4602      	mov	r2, r0
 800160a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5f 	bl	80014d4 <__NVIC_SetPriority>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff33 	bl	8001498 <__NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffa2 	bl	800158c <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001658:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800165c:	4a06      	ldr	r2, [pc, #24]	; (8001678 <HAL_MPU_Disable+0x24>)
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_MPU_Disable+0x24>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001666:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <HAL_MPU_Disable+0x28>)
 800166a:	2200      	movs	r2, #0
 800166c:	605a      	str	r2, [r3, #4]
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00
 800167c:	e000ed90 	.word	0xe000ed90

08001680 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_MPU_Enable+0x34>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <HAL_MPU_Enable+0x38>)
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_MPU_Enable+0x38>)
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800169e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016a2:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed90 	.word	0xe000ed90
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016c4:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <HAL_MPU_ConfigRegion+0x84>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	785b      	ldrb	r3, [r3, #1]
 80016ca:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d028      	beq.n	8001726 <HAL_MPU_ConfigRegion+0x6a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80016d4:	4a1a      	ldr	r2, [pc, #104]	; (8001740 <HAL_MPU_ConfigRegion+0x84>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016dc:	4918      	ldr	r1, [pc, #96]	; (8001740 <HAL_MPU_ConfigRegion+0x84>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7b1b      	ldrb	r3, [r3, #12]
 80016e2:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7adb      	ldrb	r3, [r3, #11]
 80016e8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016ea:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7a9b      	ldrb	r3, [r3, #10]
 80016f0:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016f2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7b5b      	ldrb	r3, [r3, #13]
 80016f8:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016fa:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7b9b      	ldrb	r3, [r3, #14]
 8001700:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001702:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7bdb      	ldrb	r3, [r3, #15]
 8001708:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800170a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7a5b      	ldrb	r3, [r3, #9]
 8001710:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001712:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7a1b      	ldrb	r3, [r3, #8]
 8001718:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800171a:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001720:	4313      	orrs	r3, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001722:	610b      	str	r3, [r1, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001724:	e005      	b.n	8001732 <HAL_MPU_ConfigRegion+0x76>
    MPU->RBAR = 0x00;
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_MPU_ConfigRegion+0x84>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <HAL_MPU_ConfigRegion+0x84>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed90 	.word	0xe000ed90

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e175      	b.n	8001a50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001764:	2201      	movs	r2, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	429a      	cmp	r2, r3
 800177e:	f040 8164 	bne.w	8001a4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d005      	beq.n	800179a <HAL_GPIO_Init+0x56>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d130      	bne.n	80017fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 0201 	and.w	r2, r3, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b03      	cmp	r3, #3
 8001806:	d017      	beq.n	8001838 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d123      	bne.n	800188c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	08da      	lsrs	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3208      	adds	r2, #8
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80be 	beq.w	8001a4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	4a65      	ldr	r2, [pc, #404]	; (8001a64 <HAL_GPIO_Init+0x320>)
 80018d0:	4b64      	ldr	r3, [pc, #400]	; (8001a64 <HAL_GPIO_Init+0x320>)
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b62      	ldr	r3, [pc, #392]	; (8001a64 <HAL_GPIO_Init+0x320>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018e6:	4a60      	ldr	r2, [pc, #384]	; (8001a68 <HAL_GPIO_Init+0x324>)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	220f      	movs	r2, #15
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a57      	ldr	r2, [pc, #348]	; (8001a6c <HAL_GPIO_Init+0x328>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d037      	beq.n	8001982 <HAL_GPIO_Init+0x23e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a56      	ldr	r2, [pc, #344]	; (8001a70 <HAL_GPIO_Init+0x32c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d031      	beq.n	800197e <HAL_GPIO_Init+0x23a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a55      	ldr	r2, [pc, #340]	; (8001a74 <HAL_GPIO_Init+0x330>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d02b      	beq.n	800197a <HAL_GPIO_Init+0x236>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a54      	ldr	r2, [pc, #336]	; (8001a78 <HAL_GPIO_Init+0x334>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d025      	beq.n	8001976 <HAL_GPIO_Init+0x232>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a53      	ldr	r2, [pc, #332]	; (8001a7c <HAL_GPIO_Init+0x338>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01f      	beq.n	8001972 <HAL_GPIO_Init+0x22e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a52      	ldr	r2, [pc, #328]	; (8001a80 <HAL_GPIO_Init+0x33c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d019      	beq.n	800196e <HAL_GPIO_Init+0x22a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a51      	ldr	r2, [pc, #324]	; (8001a84 <HAL_GPIO_Init+0x340>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_GPIO_Init+0x226>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a50      	ldr	r2, [pc, #320]	; (8001a88 <HAL_GPIO_Init+0x344>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00d      	beq.n	8001966 <HAL_GPIO_Init+0x222>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4f      	ldr	r2, [pc, #316]	; (8001a8c <HAL_GPIO_Init+0x348>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d007      	beq.n	8001962 <HAL_GPIO_Init+0x21e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4e      	ldr	r2, [pc, #312]	; (8001a90 <HAL_GPIO_Init+0x34c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_GPIO_Init+0x21a>
 800195a:	2309      	movs	r3, #9
 800195c:	e012      	b.n	8001984 <HAL_GPIO_Init+0x240>
 800195e:	230a      	movs	r3, #10
 8001960:	e010      	b.n	8001984 <HAL_GPIO_Init+0x240>
 8001962:	2308      	movs	r3, #8
 8001964:	e00e      	b.n	8001984 <HAL_GPIO_Init+0x240>
 8001966:	2307      	movs	r3, #7
 8001968:	e00c      	b.n	8001984 <HAL_GPIO_Init+0x240>
 800196a:	2306      	movs	r3, #6
 800196c:	e00a      	b.n	8001984 <HAL_GPIO_Init+0x240>
 800196e:	2305      	movs	r3, #5
 8001970:	e008      	b.n	8001984 <HAL_GPIO_Init+0x240>
 8001972:	2304      	movs	r3, #4
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x240>
 8001976:	2303      	movs	r3, #3
 8001978:	e004      	b.n	8001984 <HAL_GPIO_Init+0x240>
 800197a:	2302      	movs	r3, #2
 800197c:	e002      	b.n	8001984 <HAL_GPIO_Init+0x240>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x240>
 8001982:	2300      	movs	r3, #0
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	f002 0203 	and.w	r2, r2, #3
 800198a:	0092      	lsls	r2, r2, #2
 800198c:	4093      	lsls	r3, r2
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001994:	4934      	ldr	r1, [pc, #208]	; (8001a68 <HAL_GPIO_Init+0x324>)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a2:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <HAL_GPIO_Init+0x350>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c6:	4a33      	ldr	r2, [pc, #204]	; (8001a94 <HAL_GPIO_Init+0x350>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019cc:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <HAL_GPIO_Init+0x350>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f0:	4a28      	ldr	r2, [pc, #160]	; (8001a94 <HAL_GPIO_Init+0x350>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f6:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <HAL_GPIO_Init+0x350>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <HAL_GPIO_Init+0x350>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_GPIO_Init+0x350>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a44:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <HAL_GPIO_Init+0x350>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	f67f ae86 	bls.w	8001764 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a58:	bf00      	nop
 8001a5a:	3724      	adds	r7, #36	; 0x24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40021400 	.word	0x40021400
 8001a84:	40021800 	.word	0x40021800
 8001a88:	40021c00 	.word	0x40021c00
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40022400 	.word	0x40022400
 8001a94:	40013c00 	.word	0x40013c00

08001a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e001      	b.n	8001aba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad8:	787b      	ldrb	r3, [r7, #1]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ade:	887a      	ldrh	r2, [r7, #2]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ae4:	e003      	b.n	8001aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ae6:	887b      	ldrh	r3, [r7, #2]
 8001ae8:	041a      	lsls	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	619a      	str	r2, [r3, #24]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e291      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8087 	beq.w	8001c2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b20:	4b96      	ldr	r3, [pc, #600]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d00c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2c:	4b93      	ldr	r3, [pc, #588]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d112      	bne.n	8001b5e <HAL_RCC_OscConfig+0x62>
 8001b38:	4b90      	ldr	r3, [pc, #576]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b44:	d10b      	bne.n	8001b5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b46:	4b8d      	ldr	r3, [pc, #564]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d06c      	beq.n	8001c2c <HAL_RCC_OscConfig+0x130>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d168      	bne.n	8001c2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e26b      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x7a>
 8001b68:	4a84      	ldr	r2, [pc, #528]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001b6a:	4b84      	ldr	r3, [pc, #528]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e02e      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd8>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x9c>
 8001b7e:	4a7f      	ldr	r2, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001b80:	4b7e      	ldr	r3, [pc, #504]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4a7c      	ldr	r2, [pc, #496]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001b8c:	4b7b      	ldr	r3, [pc, #492]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e01d      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0xc0>
 8001ba2:	4a76      	ldr	r2, [pc, #472]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001ba4:	4b75      	ldr	r3, [pc, #468]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4a73      	ldr	r2, [pc, #460]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001bb0:	4b72      	ldr	r3, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd8>
 8001bbc:	4a6f      	ldr	r2, [pc, #444]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001bbe:	4b6f      	ldr	r3, [pc, #444]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4a6c      	ldr	r2, [pc, #432]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001bca:	4b6c      	ldr	r3, [pc, #432]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fc1e 	bl	800141c <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fc1a 	bl	800141c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e21f      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b61      	ldr	r3, [pc, #388]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0xe8>
 8001c02:	e014      	b.n	8001c2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff fc0a 	bl	800141c <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fc06 	bl	800141c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e20b      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x110>
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d069      	beq.n	8001d0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3a:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c46:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d11c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x190>
 8001c52:	4b4a      	ldr	r3, [pc, #296]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d116      	bne.n	8001c8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_RCC_OscConfig+0x17a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e1df      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c76:	4941      	ldr	r1, [pc, #260]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001c78:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	e040      	b.n	8001d0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d023      	beq.n	8001cdc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c94:	4a39      	ldr	r2, [pc, #228]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fbbc 	bl	800141c <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fbb8 	bl	800141c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1bd      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc6:	492d      	ldr	r1, [pc, #180]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001cc8:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]
 8001cda:	e018      	b.n	8001d0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cdc:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fb98 	bl	800141c <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fb94 	bl	800141c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e199      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d038      	beq.n	8001d8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d019      	beq.n	8001d56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d22:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001d24:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2e:	f7ff fb75 	bl	800141c <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d36:	f7ff fb71 	bl	800141c <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e176      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x23a>
 8001d54:	e01a      	b.n	8001d8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7ff fb5b 	bl	800141c <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fb57 	bl	800141c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d903      	bls.n	8001d80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e15c      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
 8001d7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	4b91      	ldr	r3, [pc, #580]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1ee      	bne.n	8001d6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a4 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9a:	4b8b      	ldr	r3, [pc, #556]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10d      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	4a88      	ldr	r2, [pc, #544]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001da8:	4b87      	ldr	r3, [pc, #540]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b85      	ldr	r3, [pc, #532]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc2:	4b82      	ldr	r3, [pc, #520]	; (8001fcc <HAL_RCC_OscConfig+0x4d0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001dce:	4a7f      	ldr	r2, [pc, #508]	; (8001fcc <HAL_RCC_OscConfig+0x4d0>)
 8001dd0:	4b7e      	ldr	r3, [pc, #504]	; (8001fcc <HAL_RCC_OscConfig+0x4d0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fb1f 	bl	800141c <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff fb1b 	bl	800141c <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e120      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df4:	4b75      	ldr	r3, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x4d0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x31a>
 8001e08:	4a6f      	ldr	r2, [pc, #444]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e0a:	4b6f      	ldr	r3, [pc, #444]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6713      	str	r3, [r2, #112]	; 0x70
 8001e14:	e02d      	b.n	8001e72 <HAL_RCC_OscConfig+0x376>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x33c>
 8001e1e:	4a6a      	ldr	r2, [pc, #424]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e20:	4b69      	ldr	r3, [pc, #420]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2a:	4a67      	ldr	r2, [pc, #412]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e2c:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6713      	str	r3, [r2, #112]	; 0x70
 8001e36:	e01c      	b.n	8001e72 <HAL_RCC_OscConfig+0x376>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCC_OscConfig+0x35e>
 8001e40:	4a61      	ldr	r2, [pc, #388]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e42:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	4a5e      	ldr	r2, [pc, #376]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e4e:	4b5e      	ldr	r3, [pc, #376]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6713      	str	r3, [r2, #112]	; 0x70
 8001e58:	e00b      	b.n	8001e72 <HAL_RCC_OscConfig+0x376>
 8001e5a:	4a5b      	ldr	r2, [pc, #364]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e5c:	4b5a      	ldr	r3, [pc, #360]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6713      	str	r3, [r2, #112]	; 0x70
 8001e66:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e68:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d015      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7a:	f7ff facf 	bl	800141c <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff facb 	bl	800141c <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e0ce      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e98:	4b4b      	ldr	r3, [pc, #300]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ee      	beq.n	8001e82 <HAL_RCC_OscConfig+0x386>
 8001ea4:	e014      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fab9 	bl	800141c <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff fab5 	bl	800141c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e0b8      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec4:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ee      	bne.n	8001eae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4a3c      	ldr	r2, [pc, #240]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001ed8:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 80a4 	beq.w	8002034 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eec:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d06b      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d149      	bne.n	8001f94 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f00:	4a31      	ldr	r2, [pc, #196]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001f02:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fa86 	bl	800141c <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7ff fa82 	bl	800141c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e087      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f32:	4925      	ldr	r1, [pc, #148]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	019b      	lsls	r3, r3, #6
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	085b      	lsrs	r3, r3, #1
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	041b      	lsls	r3, r3, #16
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f56:	061b      	lsls	r3, r3, #24
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001f62:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fa56 	bl	800141c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f74:	f7ff fa52 	bl	800141c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e057      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x478>
 8001f92:	e04f      	b.n	8002034 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fa3c 	bl	800141c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff fa38 	bl	800141c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e03d      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fba:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4ac>
 8001fc6:	e035      	b.n	8002034 <HAL_RCC_OscConfig+0x538>
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_RCC_OscConfig+0x544>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d028      	beq.n	8002030 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d121      	bne.n	8002030 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d11a      	bne.n	8002030 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002000:	4013      	ands	r3, r2
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002006:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002008:	4293      	cmp	r3, r2
 800200a:	d111      	bne.n	8002030 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	085b      	lsrs	r3, r3, #1
 8002018:	3b01      	subs	r3, #1
 800201a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d107      	bne.n	8002030 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800

08002044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0d0      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 020f 	and.w	r2, r3, #15
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d210      	bcs.n	800208c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4967      	ldr	r1, [pc, #412]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 020f 	bic.w	r2, r3, #15
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b63      	ldr	r3, [pc, #396]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 020f 	and.w	r2, r3, #15
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0b8      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d020      	beq.n	80020da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a4:	4a59      	ldr	r2, [pc, #356]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80020a6:	4b59      	ldr	r3, [pc, #356]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020bc:	4a53      	ldr	r2, [pc, #332]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80020be:	4b53      	ldr	r3, [pc, #332]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4950      	ldr	r1, [pc, #320]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80020ca:	4b50      	ldr	r3, [pc, #320]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d040      	beq.n	8002168 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b47      	ldr	r3, [pc, #284]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d115      	bne.n	8002126 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e07f      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	4b41      	ldr	r3, [pc, #260]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e073      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b3d      	ldr	r3, [pc, #244]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06b      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002126:	4939      	ldr	r1, [pc, #228]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	4b38      	ldr	r3, [pc, #224]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 0203 	bic.w	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002138:	f7ff f970 	bl	800141c <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	e00a      	b.n	8002156 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002140:	f7ff f96c 	bl	800141c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	; 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e053      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	4b2d      	ldr	r3, [pc, #180]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 020c 	and.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	429a      	cmp	r2, r3
 8002166:	d1eb      	bne.n	8002140 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b27      	ldr	r3, [pc, #156]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 020f 	and.w	r2, r3, #15
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d910      	bls.n	8002198 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4924      	ldr	r1, [pc, #144]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 020f 	bic.w	r2, r3, #15
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 020f 	and.w	r2, r3, #15
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e032      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a4:	4919      	ldr	r1, [pc, #100]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80021a6:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d009      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021c2:	4912      	ldr	r1, [pc, #72]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021d6:	f000 f821 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021da:	4601      	mov	r1, r0
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <HAL_RCC_ClockConfig+0x1cc>)
 80021e8:	5cd3      	ldrb	r3, [r2, r3]
 80021ea:	fa21 f303 	lsr.w	r3, r1, r3
 80021ee:	4a09      	ldr	r2, [pc, #36]	; (8002214 <HAL_RCC_ClockConfig+0x1d0>)
 80021f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_RCC_ClockConfig+0x1d4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff f8cc 	bl	8001394 <HAL_InitTick>

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023c00 	.word	0x40023c00
 800220c:	40023800 	.word	0x40023800
 8002210:	08002dc4 	.word	0x08002dc4
 8002214:	20000214 	.word	0x20000214
 8002218:	20000218 	.word	0x20000218

0800221c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002220:	b087      	sub	sp, #28
 8002222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002224:	2200      	movs	r2, #0
 8002226:	60fa      	str	r2, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	617a      	str	r2, [r7, #20]
 800222c:	2200      	movs	r2, #0
 800222e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8002230:	2200      	movs	r2, #0
 8002232:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002234:	4a51      	ldr	r2, [pc, #324]	; (800237c <HAL_RCC_GetSysClockFreq+0x160>)
 8002236:	6892      	ldr	r2, [r2, #8]
 8002238:	f002 020c 	and.w	r2, r2, #12
 800223c:	2a04      	cmp	r2, #4
 800223e:	d007      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x34>
 8002240:	2a08      	cmp	r2, #8
 8002242:	d008      	beq.n	8002256 <HAL_RCC_GetSysClockFreq+0x3a>
 8002244:	2a00      	cmp	r2, #0
 8002246:	f040 8090 	bne.w	800236a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800224a:	4b4d      	ldr	r3, [pc, #308]	; (8002380 <HAL_RCC_GetSysClockFreq+0x164>)
 800224c:	613b      	str	r3, [r7, #16]
      break;
 800224e:	e08f      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002250:	4b4c      	ldr	r3, [pc, #304]	; (8002384 <HAL_RCC_GetSysClockFreq+0x168>)
 8002252:	613b      	str	r3, [r7, #16]
      break;
 8002254:	e08c      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002256:	4a49      	ldr	r2, [pc, #292]	; (800237c <HAL_RCC_GetSysClockFreq+0x160>)
 8002258:	6852      	ldr	r2, [r2, #4]
 800225a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800225e:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002260:	4a46      	ldr	r2, [pc, #280]	; (800237c <HAL_RCC_GetSysClockFreq+0x160>)
 8002262:	6852      	ldr	r2, [r2, #4]
 8002264:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002268:	2a00      	cmp	r2, #0
 800226a:	d023      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226c:	4b43      	ldr	r3, [pc, #268]	; (800237c <HAL_RCC_GetSysClockFreq+0x160>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	f04f 0400 	mov.w	r4, #0
 8002276:	f240 11ff 	movw	r1, #511	; 0x1ff
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	ea03 0301 	and.w	r3, r3, r1
 8002282:	ea04 0402 	and.w	r4, r4, r2
 8002286:	4a3f      	ldr	r2, [pc, #252]	; (8002384 <HAL_RCC_GetSysClockFreq+0x168>)
 8002288:	fb02 f104 	mul.w	r1, r2, r4
 800228c:	2200      	movs	r2, #0
 800228e:	fb02 f203 	mul.w	r2, r2, r3
 8002292:	440a      	add	r2, r1
 8002294:	493b      	ldr	r1, [pc, #236]	; (8002384 <HAL_RCC_GetSysClockFreq+0x168>)
 8002296:	fba3 0101 	umull	r0, r1, r3, r1
 800229a:	1853      	adds	r3, r2, r1
 800229c:	4619      	mov	r1, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f04f 0400 	mov.w	r4, #0
 80022a4:	461a      	mov	r2, r3
 80022a6:	4623      	mov	r3, r4
 80022a8:	f7fd ffae 	bl	8000208 <__aeabi_uldivmod>
 80022ac:	4603      	mov	r3, r0
 80022ae:	460c      	mov	r4, r1
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e04c      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b4:	4a31      	ldr	r2, [pc, #196]	; (800237c <HAL_RCC_GetSysClockFreq+0x160>)
 80022b6:	6852      	ldr	r2, [r2, #4]
 80022b8:	0992      	lsrs	r2, r2, #6
 80022ba:	4611      	mov	r1, r2
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f240 15ff 	movw	r5, #511	; 0x1ff
 80022c4:	f04f 0600 	mov.w	r6, #0
 80022c8:	ea05 0501 	and.w	r5, r5, r1
 80022cc:	ea06 0602 	and.w	r6, r6, r2
 80022d0:	4629      	mov	r1, r5
 80022d2:	4632      	mov	r2, r6
 80022d4:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80022d8:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80022dc:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80022e0:	4651      	mov	r1, sl
 80022e2:	465a      	mov	r2, fp
 80022e4:	46aa      	mov	sl, r5
 80022e6:	46b3      	mov	fp, r6
 80022e8:	4655      	mov	r5, sl
 80022ea:	465e      	mov	r6, fp
 80022ec:	1b4d      	subs	r5, r1, r5
 80022ee:	eb62 0606 	sbc.w	r6, r2, r6
 80022f2:	4629      	mov	r1, r5
 80022f4:	4632      	mov	r2, r6
 80022f6:	0194      	lsls	r4, r2, #6
 80022f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022fc:	018b      	lsls	r3, r1, #6
 80022fe:	1a5b      	subs	r3, r3, r1
 8002300:	eb64 0402 	sbc.w	r4, r4, r2
 8002304:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002308:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800230c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002310:	4643      	mov	r3, r8
 8002312:	464c      	mov	r4, r9
 8002314:	4655      	mov	r5, sl
 8002316:	465e      	mov	r6, fp
 8002318:	18ed      	adds	r5, r5, r3
 800231a:	eb46 0604 	adc.w	r6, r6, r4
 800231e:	462b      	mov	r3, r5
 8002320:	4634      	mov	r4, r6
 8002322:	02a2      	lsls	r2, r4, #10
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	029b      	lsls	r3, r3, #10
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002336:	4618      	mov	r0, r3
 8002338:	4621      	mov	r1, r4
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f04f 0400 	mov.w	r4, #0
 8002340:	461a      	mov	r2, r3
 8002342:	4623      	mov	r3, r4
 8002344:	f7fd ff60 	bl	8000208 <__aeabi_uldivmod>
 8002348:	4603      	mov	r3, r0
 800234a:	460c      	mov	r4, r1
 800234c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_GetSysClockFreq+0x160>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	0c1b      	lsrs	r3, r3, #16
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	3301      	adds	r3, #1
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco / pllp;
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	613b      	str	r3, [r7, #16]
      break;
 8002368:	e002      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetSysClockFreq+0x164>)
 800236c:	613b      	str	r3, [r7, #16]
      break;
 800236e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002370:	693b      	ldr	r3, [r7, #16]
}
 8002372:	4618      	mov	r0, r3
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800237c:	40023800 	.word	0x40023800
 8002380:	00f42400 	.word	0x00f42400
 8002384:	017d7840 	.word	0x017d7840

08002388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e049      	b.n	800242e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7fe ff52 	bl	8001258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3304      	adds	r3, #4
 80023c4:	4619      	mov	r1, r3
 80023c6:	4610      	mov	r0, r2
 80023c8:	f000 fab4 	bl	8002934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d001      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e054      	b.n	80024fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	68d2      	ldr	r2, [r2, #12]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a26      	ldr	r2, [pc, #152]	; (8002508 <HAL_TIM_Base_Start_IT+0xd0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d022      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247a:	d01d      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a22      	ldr	r2, [pc, #136]	; (800250c <HAL_TIM_Base_Start_IT+0xd4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d018      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a21      	ldr	r2, [pc, #132]	; (8002510 <HAL_TIM_Base_Start_IT+0xd8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d013      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <HAL_TIM_Base_Start_IT+0xdc>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00e      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1e      	ldr	r2, [pc, #120]	; (8002518 <HAL_TIM_Base_Start_IT+0xe0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d009      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1c      	ldr	r2, [pc, #112]	; (800251c <HAL_TIM_Base_Start_IT+0xe4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d004      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <HAL_TIM_Base_Start_IT+0xe8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d115      	bne.n	80024e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_TIM_Base_Start_IT+0xec>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d015      	beq.n	80024f6 <HAL_TIM_Base_Start_IT+0xbe>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d011      	beq.n	80024f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e2:	e008      	b.n	80024f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e000      	b.n	80024f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40010000 	.word	0x40010000
 800250c:	40000400 	.word	0x40000400
 8002510:	40000800 	.word	0x40000800
 8002514:	40000c00 	.word	0x40000c00
 8002518:	40010400 	.word	0x40010400
 800251c:	40014000 	.word	0x40014000
 8002520:	40001800 	.word	0x40001800
 8002524:	00010007 	.word	0x00010007

08002528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b02      	cmp	r3, #2
 800253c:	d122      	bne.n	8002584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b02      	cmp	r3, #2
 800254a:	d11b      	bne.n	8002584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0202 	mvn.w	r2, #2
 8002554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f9c4 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 8002570:	e005      	b.n	800257e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f9b6 	bl	80028e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f9c7 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b04      	cmp	r3, #4
 8002590:	d122      	bne.n	80025d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b04      	cmp	r3, #4
 800259e:	d11b      	bne.n	80025d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0204 	mvn.w	r2, #4
 80025a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f99a 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 80025c4:	e005      	b.n	80025d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f98c 	bl	80028e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f99d 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d122      	bne.n	800262c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d11b      	bne.n	800262c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0208 	mvn.w	r2, #8
 80025fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2204      	movs	r2, #4
 8002602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f970 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 8002618:	e005      	b.n	8002626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f962 	bl	80028e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f973 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b10      	cmp	r3, #16
 8002638:	d122      	bne.n	8002680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b10      	cmp	r3, #16
 8002646:	d11b      	bne.n	8002680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0210 	mvn.w	r2, #16
 8002650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2208      	movs	r2, #8
 8002656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f946 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 800266c:	e005      	b.n	800267a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f938 	bl	80028e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f949 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b01      	cmp	r3, #1
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0201 	mvn.w	r2, #1
 80026a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fd ff36 	bl	8000518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b6:	2b80      	cmp	r3, #128	; 0x80
 80026b8:	d10e      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b80      	cmp	r3, #128	; 0x80
 80026c6:	d107      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fb00 	bl	8002cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e6:	d10e      	bne.n	8002706 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f2:	2b80      	cmp	r3, #128	; 0x80
 80026f4:	d107      	bne.n	8002706 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80026fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 faf3 	bl	8002cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002710:	2b40      	cmp	r3, #64	; 0x40
 8002712:	d10e      	bne.n	8002732 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b40      	cmp	r3, #64	; 0x40
 8002720:	d107      	bne.n	8002732 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800272a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f8f7 	bl	8002920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b20      	cmp	r3, #32
 800273e:	d10e      	bne.n	800275e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b20      	cmp	r3, #32
 800274c:	d107      	bne.n	800275e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f06f 0220 	mvn.w	r2, #32
 8002756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fab3 	bl	8002cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_TIM_ConfigClockSource+0x1c>
 8002780:	2302      	movs	r3, #2
 8002782:	e0a9      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x170>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	4b50      	ldr	r3, [pc, #320]	; (80028e0 <HAL_TIM_ConfigClockSource+0x178>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b40      	cmp	r3, #64	; 0x40
 80027ba:	d067      	beq.n	800288c <HAL_TIM_ConfigClockSource+0x124>
 80027bc:	2b40      	cmp	r3, #64	; 0x40
 80027be:	d80b      	bhi.n	80027d8 <HAL_TIM_ConfigClockSource+0x70>
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d073      	beq.n	80028ac <HAL_TIM_ConfigClockSource+0x144>
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d802      	bhi.n	80027ce <HAL_TIM_ConfigClockSource+0x66>
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d06f      	beq.n	80028ac <HAL_TIM_ConfigClockSource+0x144>
 80027cc:	e077      	b.n	80028be <HAL_TIM_ConfigClockSource+0x156>
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d06c      	beq.n	80028ac <HAL_TIM_ConfigClockSource+0x144>
 80027d2:	2b30      	cmp	r3, #48	; 0x30
 80027d4:	d06a      	beq.n	80028ac <HAL_TIM_ConfigClockSource+0x144>
 80027d6:	e072      	b.n	80028be <HAL_TIM_ConfigClockSource+0x156>
 80027d8:	2b70      	cmp	r3, #112	; 0x70
 80027da:	d00d      	beq.n	80027f8 <HAL_TIM_ConfigClockSource+0x90>
 80027dc:	2b70      	cmp	r3, #112	; 0x70
 80027de:	d804      	bhi.n	80027ea <HAL_TIM_ConfigClockSource+0x82>
 80027e0:	2b50      	cmp	r3, #80	; 0x50
 80027e2:	d033      	beq.n	800284c <HAL_TIM_ConfigClockSource+0xe4>
 80027e4:	2b60      	cmp	r3, #96	; 0x60
 80027e6:	d041      	beq.n	800286c <HAL_TIM_ConfigClockSource+0x104>
 80027e8:	e069      	b.n	80028be <HAL_TIM_ConfigClockSource+0x156>
 80027ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ee:	d069      	beq.n	80028c4 <HAL_TIM_ConfigClockSource+0x15c>
 80027f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f4:	d017      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0xbe>
 80027f6:	e062      	b.n	80028be <HAL_TIM_ConfigClockSource+0x156>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f000 f9ae 	bl	8002b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800281a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	609a      	str	r2, [r3, #8]
      break;
 8002824:	e04f      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6899      	ldr	r1, [r3, #8]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f000 f997 	bl	8002b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	6892      	ldr	r2, [r2, #8]
 8002844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002848:	609a      	str	r2, [r3, #8]
      break;
 800284a:	e03c      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	461a      	mov	r2, r3
 800285a:	f000 f90b 	bl	8002a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2150      	movs	r1, #80	; 0x50
 8002864:	4618      	mov	r0, r3
 8002866:	f000 f964 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 800286a:	e02c      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	461a      	mov	r2, r3
 800287a:	f000 f92a 	bl	8002ad2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2160      	movs	r1, #96	; 0x60
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f954 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 800288a:	e01c      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	461a      	mov	r2, r3
 800289a:	f000 f8eb 	bl	8002a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2140      	movs	r1, #64	; 0x40
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 f944 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 80028aa:	e00c      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x15e>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4610      	mov	r0, r2
 80028b8:	f000 f93b 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 80028bc:	e003      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x15e>
    }

    default:
      status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
      break;
 80028c2:	e000      	b.n	80028c6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80028c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	fffeff88 	.word	0xfffeff88

080028e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a40      	ldr	r2, [pc, #256]	; (8002a48 <TIM_Base_SetConfig+0x114>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <TIM_Base_SetConfig+0x40>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d00f      	beq.n	8002974 <TIM_Base_SetConfig+0x40>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a3d      	ldr	r2, [pc, #244]	; (8002a4c <TIM_Base_SetConfig+0x118>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00b      	beq.n	8002974 <TIM_Base_SetConfig+0x40>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3c      	ldr	r2, [pc, #240]	; (8002a50 <TIM_Base_SetConfig+0x11c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d007      	beq.n	8002974 <TIM_Base_SetConfig+0x40>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a3b      	ldr	r2, [pc, #236]	; (8002a54 <TIM_Base_SetConfig+0x120>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <TIM_Base_SetConfig+0x40>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a3a      	ldr	r2, [pc, #232]	; (8002a58 <TIM_Base_SetConfig+0x124>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d108      	bne.n	8002986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a2f      	ldr	r2, [pc, #188]	; (8002a48 <TIM_Base_SetConfig+0x114>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d02b      	beq.n	80029e6 <TIM_Base_SetConfig+0xb2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002994:	d027      	beq.n	80029e6 <TIM_Base_SetConfig+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <TIM_Base_SetConfig+0x118>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d023      	beq.n	80029e6 <TIM_Base_SetConfig+0xb2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a2b      	ldr	r2, [pc, #172]	; (8002a50 <TIM_Base_SetConfig+0x11c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01f      	beq.n	80029e6 <TIM_Base_SetConfig+0xb2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <TIM_Base_SetConfig+0x120>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01b      	beq.n	80029e6 <TIM_Base_SetConfig+0xb2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a29      	ldr	r2, [pc, #164]	; (8002a58 <TIM_Base_SetConfig+0x124>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d017      	beq.n	80029e6 <TIM_Base_SetConfig+0xb2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a28      	ldr	r2, [pc, #160]	; (8002a5c <TIM_Base_SetConfig+0x128>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <TIM_Base_SetConfig+0xb2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a27      	ldr	r2, [pc, #156]	; (8002a60 <TIM_Base_SetConfig+0x12c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00f      	beq.n	80029e6 <TIM_Base_SetConfig+0xb2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <TIM_Base_SetConfig+0x130>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00b      	beq.n	80029e6 <TIM_Base_SetConfig+0xb2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a25      	ldr	r2, [pc, #148]	; (8002a68 <TIM_Base_SetConfig+0x134>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d007      	beq.n	80029e6 <TIM_Base_SetConfig+0xb2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <TIM_Base_SetConfig+0x138>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d003      	beq.n	80029e6 <TIM_Base_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a23      	ldr	r2, [pc, #140]	; (8002a70 <TIM_Base_SetConfig+0x13c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d108      	bne.n	80029f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <TIM_Base_SetConfig+0x114>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d003      	beq.n	8002a2c <TIM_Base_SetConfig+0xf8>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <TIM_Base_SetConfig+0x124>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d103      	bne.n	8002a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	615a      	str	r2, [r3, #20]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800
 8002a54:	40000c00 	.word	0x40000c00
 8002a58:	40010400 	.word	0x40010400
 8002a5c:	40014000 	.word	0x40014000
 8002a60:	40014400 	.word	0x40014400
 8002a64:	40014800 	.word	0x40014800
 8002a68:	40001800 	.word	0x40001800
 8002a6c:	40001c00 	.word	0x40001c00
 8002a70:	40002000 	.word	0x40002000

08002a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f023 0201 	bic.w	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f023 030a 	bic.w	r3, r3, #10
 8002ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0210 	bic.w	r2, r3, #16
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	031b      	lsls	r3, r3, #12
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f043 0307 	orr.w	r3, r3, #7
 8002b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	021a      	lsls	r2, r3, #8
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	609a      	str	r2, [r3, #8]
}
 8002b9c:	bf00      	nop
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e06d      	b.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a30      	ldr	r2, [pc, #192]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d004      	beq.n	8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2f      	ldr	r2, [pc, #188]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d108      	bne.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002bfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a20      	ldr	r2, [pc, #128]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d022      	beq.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c32:	d01d      	beq.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d018      	beq.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a1c      	ldr	r2, [pc, #112]	; (8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d013      	beq.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00e      	beq.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a15      	ldr	r2, [pc, #84]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d009      	beq.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d004      	beq.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a15      	ldr	r2, [pc, #84]	; (8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d10c      	bne.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	40010400 	.word	0x40010400
 8002cb0:	40000400 	.word	0x40000400
 8002cb4:	40000800 	.word	0x40000800
 8002cb8:	40000c00 	.word	0x40000c00
 8002cbc:	40014000 	.word	0x40014000
 8002cc0:	40001800 	.word	0x40001800

08002cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d04:	480d      	ldr	r0, [pc, #52]	; (8002d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d06:	490e      	ldr	r1, [pc, #56]	; (8002d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d08:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d0c:	e002      	b.n	8002d14 <LoopCopyDataInit>

08002d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d12:	3304      	adds	r3, #4

08002d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d18:	d3f9      	bcc.n	8002d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1a:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d1c:	4c0b      	ldr	r4, [pc, #44]	; (8002d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d20:	e001      	b.n	8002d26 <LoopFillZerobss>

08002d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d24:	3204      	adds	r2, #4

08002d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d28:	d3fb      	bcc.n	8002d22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d2a:	f7fe fb13 	bl	8001354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2e:	f000 f811 	bl	8002d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d32:	f7fd fd21 	bl	8000778 <main>
  bx  lr    
 8002d36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d40:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8002d44:	08002de4 	.word	0x08002de4
  ldr r2, =_sbss
 8002d48:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002d4c:	200002e4 	.word	0x200002e4

08002d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d50:	e7fe      	b.n	8002d50 <ADC_IRQHandler>
	...

08002d54 <__libc_init_array>:
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	4e0d      	ldr	r6, [pc, #52]	; (8002d8c <__libc_init_array+0x38>)
 8002d58:	4c0d      	ldr	r4, [pc, #52]	; (8002d90 <__libc_init_array+0x3c>)
 8002d5a:	1ba4      	subs	r4, r4, r6
 8002d5c:	10a4      	asrs	r4, r4, #2
 8002d5e:	2500      	movs	r5, #0
 8002d60:	42a5      	cmp	r5, r4
 8002d62:	d109      	bne.n	8002d78 <__libc_init_array+0x24>
 8002d64:	4e0b      	ldr	r6, [pc, #44]	; (8002d94 <__libc_init_array+0x40>)
 8002d66:	4c0c      	ldr	r4, [pc, #48]	; (8002d98 <__libc_init_array+0x44>)
 8002d68:	f000 f820 	bl	8002dac <_init>
 8002d6c:	1ba4      	subs	r4, r4, r6
 8002d6e:	10a4      	asrs	r4, r4, #2
 8002d70:	2500      	movs	r5, #0
 8002d72:	42a5      	cmp	r5, r4
 8002d74:	d105      	bne.n	8002d82 <__libc_init_array+0x2e>
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
 8002d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d7c:	4798      	blx	r3
 8002d7e:	3501      	adds	r5, #1
 8002d80:	e7ee      	b.n	8002d60 <__libc_init_array+0xc>
 8002d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d86:	4798      	blx	r3
 8002d88:	3501      	adds	r5, #1
 8002d8a:	e7f2      	b.n	8002d72 <__libc_init_array+0x1e>
 8002d8c:	08002ddc 	.word	0x08002ddc
 8002d90:	08002ddc 	.word	0x08002ddc
 8002d94:	08002ddc 	.word	0x08002ddc
 8002d98:	08002de0 	.word	0x08002de0

08002d9c <memset>:
 8002d9c:	4402      	add	r2, r0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d100      	bne.n	8002da6 <memset+0xa>
 8002da4:	4770      	bx	lr
 8002da6:	f803 1b01 	strb.w	r1, [r3], #1
 8002daa:	e7f9      	b.n	8002da0 <memset+0x4>

08002dac <_init>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr

08002db8 <_fini>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	bf00      	nop
 8002dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dbe:	bc08      	pop	{r3}
 8002dc0:	469e      	mov	lr, r3
 8002dc2:	4770      	bx	lr
