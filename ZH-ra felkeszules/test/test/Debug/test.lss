
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000952  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000836  00000000  00000000  00000d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000305  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  000018c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044a  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f2  00000000  00000000  00001e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	5e c0       	rjmp	.+188    	; 0xc2 <__bad_interrupt>
   6:	00 00       	nop
   8:	5c c0       	rjmp	.+184    	; 0xc2 <__bad_interrupt>
   a:	00 00       	nop
   c:	5a c0       	rjmp	.+180    	; 0xc2 <__bad_interrupt>
   e:	00 00       	nop
  10:	58 c0       	rjmp	.+176    	; 0xc2 <__bad_interrupt>
  12:	00 00       	nop
  14:	56 c0       	rjmp	.+172    	; 0xc2 <__bad_interrupt>
  16:	00 00       	nop
  18:	54 c0       	rjmp	.+168    	; 0xc2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	52 c0       	rjmp	.+164    	; 0xc2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	50 c0       	rjmp	.+160    	; 0xc2 <__bad_interrupt>
  22:	00 00       	nop
  24:	4e c0       	rjmp	.+156    	; 0xc2 <__bad_interrupt>
  26:	00 00       	nop
  28:	4c c0       	rjmp	.+152    	; 0xc2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4a c0       	rjmp	.+148    	; 0xc2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	49 c0       	rjmp	.+146    	; 0xc4 <__vector_12>
  32:	00 00       	nop
  34:	46 c0       	rjmp	.+140    	; 0xc2 <__bad_interrupt>
  36:	00 00       	nop
  38:	44 c0       	rjmp	.+136    	; 0xc2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	42 c0       	rjmp	.+132    	; 0xc2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	28 c1       	rjmp	.+592    	; 0x292 <__vector_16>
  42:	00 00       	nop
  44:	3e c0       	rjmp	.+124    	; 0xc2 <__bad_interrupt>
  46:	00 00       	nop
  48:	3c c0       	rjmp	.+120    	; 0xc2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3a c0       	rjmp	.+116    	; 0xc2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	38 c0       	rjmp	.+112    	; 0xc2 <__bad_interrupt>
  52:	00 00       	nop
  54:	36 c0       	rjmp	.+108    	; 0xc2 <__bad_interrupt>
  56:	00 00       	nop
  58:	34 c0       	rjmp	.+104    	; 0xc2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	32 c0       	rjmp	.+100    	; 0xc2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	30 c0       	rjmp	.+96     	; 0xc2 <__bad_interrupt>
  62:	00 00       	nop
  64:	2e c0       	rjmp	.+92     	; 0xc2 <__bad_interrupt>
  66:	00 00       	nop
  68:	2c c0       	rjmp	.+88     	; 0xc2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2a c0       	rjmp	.+84     	; 0xc2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	28 c0       	rjmp	.+80     	; 0xc2 <__bad_interrupt>
  72:	00 00       	nop
  74:	26 c0       	rjmp	.+76     	; 0xc2 <__bad_interrupt>
  76:	00 00       	nop
  78:	24 c0       	rjmp	.+72     	; 0xc2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	22 c0       	rjmp	.+68     	; 0xc2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	20 c0       	rjmp	.+64     	; 0xc2 <__bad_interrupt>
  82:	00 00       	nop
  84:	1e c0       	rjmp	.+60     	; 0xc2 <__bad_interrupt>
  86:	00 00       	nop
  88:	1c c0       	rjmp	.+56     	; 0xc2 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ef       	ldi	r30, 0xFA	; 250
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a0 30       	cpi	r26, 0x00	; 0
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a8 30       	cpi	r26, 0x08	; 8
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	c1 d0       	rcall	.+386    	; 0x242 <main>
  c0:	1a c1       	rjmp	.+564    	; 0x2f6 <_exit>

000000c2 <__bad_interrupt>:
  c2:	9e cf       	rjmp	.-196    	; 0x0 <__vectors>

000000c4 <__vector_12>:
	while(1)
	{
	}
}
ISR(TIMER1_COMPA_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	4f 93       	push	r20
  d4:	5f 93       	push	r21
  d6:	6f 93       	push	r22
  d8:	7f 93       	push	r23
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
	szamlalo++; //Számlálás
  ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <szamlalo>
  ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <szamlalo+0x1>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <szamlalo+0x1>
  f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <szamlalo>
	if (szamlalo==1001)
  fc:	89 3e       	cpi	r24, 0xE9	; 233
  fe:	93 40       	sbci	r25, 0x03	; 3
 100:	21 f4       	brne	.+8      	; 0x10a <__vector_12+0x46>
	{
		szamlalo=0;
 102:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <szamlalo+0x1>
 106:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <szamlalo>
	}
	digit[0]=szamlalo%10;
 10a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <szamlalo>
 10e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <szamlalo+0x1>
 112:	9a 01       	movw	r18, r20
 114:	ad ec       	ldi	r26, 0xCD	; 205
 116:	bc ec       	ldi	r27, 0xCC	; 204
 118:	df d0       	rcall	.+446    	; 0x2d8 <__umulhisi3>
 11a:	96 95       	lsr	r25
 11c:	87 95       	ror	r24
 11e:	96 95       	lsr	r25
 120:	87 95       	ror	r24
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	9c 01       	movw	r18, r24
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	82 0f       	add	r24, r18
 13a:	93 1f       	adc	r25, r19
 13c:	9a 01       	movw	r18, r20
 13e:	28 1b       	sub	r18, r24
 140:	39 0b       	sbc	r19, r25
 142:	e4 e0       	ldi	r30, 0x04	; 4
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	20 83       	st	Z, r18
	digit[1]=(szamlalo/10)%10;
 148:	9a 01       	movw	r18, r20
 14a:	c6 d0       	rcall	.+396    	; 0x2d8 <__umulhisi3>
 14c:	ec 01       	movw	r28, r24
 14e:	d6 95       	lsr	r29
 150:	c7 95       	ror	r28
 152:	d6 95       	lsr	r29
 154:	c7 95       	ror	r28
 156:	d6 95       	lsr	r29
 158:	c7 95       	ror	r28
 15a:	9e 01       	movw	r18, r28
 15c:	bd d0       	rcall	.+378    	; 0x2d8 <__umulhisi3>
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	9c 01       	movw	r18, r24
 16c:	22 0f       	add	r18, r18
 16e:	33 1f       	adc	r19, r19
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	82 0f       	add	r24, r18
 17e:	93 1f       	adc	r25, r19
 180:	9e 01       	movw	r18, r28
 182:	28 1b       	sub	r18, r24
 184:	39 0b       	sbc	r19, r25
 186:	21 83       	std	Z+1, r18	; 0x01
	digit[2]=(szamlalo/100)%10;
 188:	9a 01       	movw	r18, r20
 18a:	36 95       	lsr	r19
 18c:	27 95       	ror	r18
 18e:	36 95       	lsr	r19
 190:	27 95       	ror	r18
 192:	ab e7       	ldi	r26, 0x7B	; 123
 194:	b4 e1       	ldi	r27, 0x14	; 20
 196:	a0 d0       	rcall	.+320    	; 0x2d8 <__umulhisi3>
 198:	ec 01       	movw	r28, r24
 19a:	d6 95       	lsr	r29
 19c:	c7 95       	ror	r28
 19e:	9e 01       	movw	r18, r28
 1a0:	ad ec       	ldi	r26, 0xCD	; 205
 1a2:	bc ec       	ldi	r27, 0xCC	; 204
 1a4:	99 d0       	rcall	.+306    	; 0x2d8 <__umulhisi3>
 1a6:	96 95       	lsr	r25
 1a8:	87 95       	ror	r24
 1aa:	96 95       	lsr	r25
 1ac:	87 95       	ror	r24
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	9c 01       	movw	r18, r24
 1b4:	22 0f       	add	r18, r18
 1b6:	33 1f       	adc	r19, r19
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	82 0f       	add	r24, r18
 1c6:	93 1f       	adc	r25, r19
 1c8:	9e 01       	movw	r18, r28
 1ca:	28 1b       	sub	r18, r24
 1cc:	39 0b       	sbc	r19, r25
 1ce:	22 83       	std	Z+2, r18	; 0x02
	digit[3]=szamlalo/1000;
 1d0:	9a 01       	movw	r18, r20
 1d2:	36 95       	lsr	r19
 1d4:	27 95       	ror	r18
 1d6:	36 95       	lsr	r19
 1d8:	27 95       	ror	r18
 1da:	36 95       	lsr	r19
 1dc:	27 95       	ror	r18
 1de:	a5 ec       	ldi	r26, 0xC5	; 197
 1e0:	b0 e2       	ldi	r27, 0x20	; 32
 1e2:	7a d0       	rcall	.+244    	; 0x2d8 <__umulhisi3>
 1e4:	92 95       	swap	r25
 1e6:	82 95       	swap	r24
 1e8:	8f 70       	andi	r24, 0x0F	; 15
 1ea:	89 27       	eor	r24, r25
 1ec:	9f 70       	andi	r25, 0x0F	; 15
 1ee:	89 27       	eor	r24, r25
 1f0:	83 83       	std	Z+3, r24	; 0x03
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <Timer1Init>:
{
	SEVSEG_put4number();
}

void Timer1Init() {
	TCCR1B = (1<<WGM12) | (1<<CS12) ; //ctc //256
 218:	8c e0       	ldi	r24, 0x0C	; 12
 21a:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0;
 21c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
	OCR1A = 31249; //max 65535 (16bit-es) 1s (8MHz)
 220:	81 e1       	ldi	r24, 0x11	; 17
 222:	9a e7       	ldi	r25, 0x7A	; 122
 224:	9b bd       	out	0x2b, r25	; 43
 226:	8a bd       	out	0x2a, r24	; 42
	
	TIMSK |= (1<<OCIE1A); //engedélyezés
 228:	87 b7       	in	r24, 0x37	; 55
 22a:	80 61       	ori	r24, 0x10	; 16
 22c:	87 bf       	out	0x37, r24	; 55
 22e:	08 95       	ret

00000230 <Timer0Init>:
}
void Timer0Init()
{
	TCCR0=(0<<CS02)|(1<<CS01)|(1<<CS00);//011: eloosztas 32---~1 ms
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	83 bf       	out	0x33, r24	; 51
	TIMSK|=(1<<TOIE0);
 234:	87 b7       	in	r24, 0x37	; 55
 236:	81 60       	ori	r24, 0x01	; 1
 238:	87 bf       	out	0x37, r24	; 55
 23a:	08 95       	ret

0000023c <PORT_init>:
}
void PORT_init()
{
	DDRA = 0xFF;
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	8a bb       	out	0x1a, r24	; 26
 240:	08 95       	ret

00000242 <main>:
uint8_t digit[4]={0};
uint16_t szamlalo=0;
int j=0;
int main()
{
	PORT_init();
 242:	fc df       	rcall	.-8      	; 0x23c <PORT_init>
	Timer1Init(); //Timer beállítása
 244:	e9 df       	rcall	.-46     	; 0x218 <Timer1Init>
	Timer0Init();
 246:	f4 df       	rcall	.-24     	; 0x230 <Timer0Init>
 248:	78 94       	sei
	sei();
 24a:	ff cf       	rjmp	.-2      	; 0x24a <main+0x8>

0000024c <SEVSEG_put1number>:
 24c:	90 e1       	ldi	r25, 0x10	; 16
{
	DDRA = 0xFF;
}
void SEVSEG_put1number(uint8_t szam, uint8_t digit)
{
	PORTA=0x80 | (digit)<<4 | szam; //kiíratás 0x80=enable;
 24e:	69 9f       	mul	r22, r25
 250:	b0 01       	movw	r22, r0
 252:	11 24       	eor	r1, r1
 254:	86 2b       	or	r24, r22
 256:	68 2f       	mov	r22, r24
 258:	60 68       	ori	r22, 0x80	; 128
 25a:	6b bb       	out	0x1b, r22	; 27
 25c:	08 95       	ret

0000025e <SEVSEG_put4number>:
}
void SEVSEG_put4number()
{
	j = (j+1)%4; //folyamatos kiírás
 25e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 262:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 266:	6f 5f       	subi	r22, 0xFF	; 255
 268:	7f 4f       	sbci	r23, 0xFF	; 255
 26a:	63 70       	andi	r22, 0x03	; 3
 26c:	70 78       	andi	r23, 0x80	; 128
 26e:	77 23       	and	r23, r23
 270:	34 f4       	brge	.+12     	; 0x27e <SEVSEG_put4number+0x20>
 272:	61 50       	subi	r22, 0x01	; 1
 274:	71 09       	sbc	r23, r1
 276:	6c 6f       	ori	r22, 0xFC	; 252
 278:	7f 6f       	ori	r23, 0xFF	; 255
 27a:	6f 5f       	subi	r22, 0xFF	; 255
 27c:	7f 4f       	sbci	r23, 0xFF	; 255
 27e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 282:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	SEVSEG_put1number(digit[j], j);
 286:	fb 01       	movw	r30, r22
 288:	ec 5f       	subi	r30, 0xFC	; 252
 28a:	fe 4f       	sbci	r31, 0xFE	; 254
 28c:	80 81       	ld	r24, Z
 28e:	de cf       	rjmp	.-68     	; 0x24c <SEVSEG_put1number>
 290:	08 95       	ret

00000292 <__vector_16>:
	digit[1]=(szamlalo/10)%10;
	digit[2]=(szamlalo/100)%10;
	digit[3]=szamlalo/1000;
}
ISR(TIMER0_OVF_vect)
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	SEVSEG_put4number();
 2b4:	d4 df       	rcall	.-88     	; 0x25e <SEVSEG_put4number>
}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	7f 91       	pop	r23
 2c4:	6f 91       	pop	r22
 2c6:	5f 91       	pop	r21
 2c8:	4f 91       	pop	r20
 2ca:	3f 91       	pop	r19
 2cc:	2f 91       	pop	r18
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <__umulhisi3>:
 2d8:	a2 9f       	mul	r26, r18
 2da:	b0 01       	movw	r22, r0
 2dc:	b3 9f       	mul	r27, r19
 2de:	c0 01       	movw	r24, r0
 2e0:	a3 9f       	mul	r26, r19
 2e2:	70 0d       	add	r23, r0
 2e4:	81 1d       	adc	r24, r1
 2e6:	11 24       	eor	r1, r1
 2e8:	91 1d       	adc	r25, r1
 2ea:	b2 9f       	mul	r27, r18
 2ec:	70 0d       	add	r23, r0
 2ee:	81 1d       	adc	r24, r1
 2f0:	11 24       	eor	r1, r1
 2f2:	91 1d       	adc	r25, r1
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
